Searching 1390 files for "auto"

/Users/Jackie/Desktop/project411/CU-Events/.cs411/.Python:
    <binary>

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/ceval.h:
   65       triggered, the interpreter aborts with a Fatal Error.
   66  
   67:    In addition, the "overflowed" flag is automatically reset when the
   68     recursion level drops below "current recursion limit - 50". This heuristic
   69     is meant to ensure that the normal anti-recursion protection doesn't get

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/objimpl.h:
   59  be aware that Python no control over these objects because they don't
   60  cooperate with the Python memory manager.  Such objects may not be eligible
   61: for automatic garbage collection and you have to make sure that they are
   62  released accordingly whenever their destructor gets called (cf. the specific
   63  form of memory management you're using).
   ..
  198  
  199     Note that in C++, the use of the new operator usually implies that
  200:    the 1st step is performed automatically for you, so in a C++ class
  201     constructor you would start directly with PyObject_Init/InitVar
  202  */

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/opcode.h:
    1: /* Auto-generated by Tools/scripts/generate_opcode_h.py */
    2  #ifndef Py_OPCODE_H
    3  #define Py_OPCODE_H

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/pyatomic.h:
  208          case _Py_memory_order_acq_rel: \
  209          case _Py_memory_order_seq_cst: \
  210:             /* Loads on x86 are automatically acquire operations so */ \
  211              /* can get by with just a compiler fence. */ \
  212              _Py_atomic_signal_fence(_Py_memory_order_acquire); \

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/pyconfig.h:
    1  /* pyconfig.h.  Generated from pyconfig.h.in by configure.  */
    2: /* pyconfig.h.in.  Generated from configure.ac by autoheader.  */
    3  
    4  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/pydtrace.h:
   11  #include "pydtrace_probes.h"
   12  
   13: /* pydtrace_probes.h, on systems with DTrace, is auto-generated to include
   14     `PyDTrace_{PROBE}` and `PyDTrace_{PROBE}_ENABLED()` macros for every probe
   15     defined in pydtrace_provider.d.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/pymacconfig.h:
    2  #define PYMACCONFIG_H
    3       /*
    4:       * This file moves some of the autoconf magic to compile-time
    5        * when building on MacOSX. This is needed for building 4-way
    6        * universal binaries and for 64-bit universal binaries because

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/pyport.h:
  599    All windows ports, except cygwin, are handled in PC/pyconfig.h.
  600  
  601:   Cygwin is the only other autoconf platform requiring special
  602    linkage handling and it uses __declspec().
  603  */
  ...
  622          /* Building an extension module, or an embedded situation */
  623          /* public Python functions and data are imported */
  624:         /* Under Cygwin, auto-import functions to prevent compilation */
  625          /* failures similar to those described at the bottom of 4.1: */
  626          /* http://docs.python.org/extending/windows.html#a-cookbook-approach */

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/pystate.h:
  258     this thread.  May return NULL if no GILState API has been used
  259     on the current thread.  Note that the main thread always has such a
  260:    thread-state, even if no auto-thread-state call has been made
  261     on the main thread.
  262  */

/Users/Jackie/Desktop/project411/CU-Events/.cs411/include/python3.6m/Python-ast.h:
    1: /* File automatically generated by Parser/asdl_c.py. */
    2  
    3  #include "asdl.h"

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/_collections_abc.py:
  423      To override the comparisons (presumably for speed, as the
  424      semantics are fixed), redefine __le__ and __ge__,
  425:     then the other operations will automatically follow suit.
  426      """
  427  
  ...
  563      To override the comparisons (presumably for speed, as the
  564      semantics are fixed), all you have to do is redefine __le__ and
  565:     then the other operations will automatically follow suit.
  566      """
  567  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/_dummy_thread.py:
  103          """Dummy implementation of acquire().
  104  
  105:         For blocking calls, self.locked_status is automatically set to
  106          True and returned appropriately based on value of
  107          ``waitflag``.  If it is non-blocking, then the value is

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/collections/__init__.py:
  379  
  380      # Validate the field names.  At the user's option, either generate an error
  381:     # message or automatically replace the field name with a valid name.
  382      if isinstance(field_names, str):
  383          field_names = field_names.replace(',', ' ').split()

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/config-3.6m-darwin/config.c:
    1: /* Generated automatically from /Users/sysadmin/build/v3.6.0/Modules/config.c.in by makesetup. */
    2  /* -*- C -*- ***********************************************
    3  Copyright (c) 2000, BeOpen.com.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/config-3.6m-darwin/Makefile:
    1: # Generated automatically from Makefile.pre by makesetup.
    2  # Top-level Makefile for Python
    3  #
    .
  604  	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -o $@ $<
  605  
  606: # blake2s is auto-generated from blake2b
  607  $(srcdir)/Modules/_blake2/blake2s_impl.c: $(BUILDPYTHON) $(srcdir)/Modules/_blake2/blake2b_impl.c $(srcdir)/Modules/_blake2/blake2b2s.py
  608  	$(RUNSHARED) $(PYTHON_FOR_BUILD) $(srcdir)/Modules/_blake2/blake2b2s.py
  ...
  653  	$(LDSHARED) -o $@ $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST)
  654  
  655: # Copy up the gdb python hooks into a position where they can be automatically
  656  # loaded by gdb during Lib/test/test_gdb.py
  657  #
  ...
 1466  # structure in the install location, /Library/Frameworks/ or the argument to
 1467  # --enable-framework. If --enable-framework has been specified then we have
 1468: # automatically set prefix to the location deep down in the framework, so we
 1469  # only have to cater for the structural bits of the framework.
 1470  
 ....
 1560  
 1561  # Rebuild the configure script from configure.ac; also rebuild pyconfig.h.in
 1562: autoconf:
 1563: 	(cd $(srcdir); autoconf -Wall)
 1564: 	(cd $(srcdir); autoheader -Wall)
 1565  
 1566  # Create a tags file for vi
 ....
 1703  .PHONY: frameworkinstall frameworkinstallframework frameworkinstallstructure
 1704  .PHONY: frameworkinstallmaclib frameworkinstallapps frameworkinstallunixtools
 1705: .PHONY: frameworkaltinstallunixtools recheck autoconf clean clobber distclean
 1706  .PHONY: smelly funny patchcheck touch altmaninstall commoninstall
 1707  .PHONY: gdbhooks

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/config-3.6m-darwin/makesetup:
  121  	while read line
  122  	do
  123: 		# to handle backslashes for sh's that don't automatically
  124  		# continue a read when the last char is a backslash
  125  		while echo $line | grep '\\$' > /dev/null
  ...
  267  	-)  ;;
  268  	*)  sed -e "
  269: 		1i$NL/* Generated automatically from $config by makesetup. */
  270  		/MARKER 1/i$NL$EXTDECLS
  271  
  ...
  281  		trap 'rm -f $sedf' 0 1 2 3
  282  		echo "1i\\" >$sedf
  283: 		str="# Generated automatically from $makepre by makesetup."
  284  		echo "$str" >>$sedf
  285  		echo "s%_MODNAMES_%$NAMES%" >>$sedf

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/encodings/charmap.py:
    1  """ Generic Python Character Mapping Codec.
    2  
    3:     Use this codec directly rather than through the automatic
    4      conversion mechanisms supplied by unicode() and .encode().
    5  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/encodings/undefined.py:
    3      This codec will always raise a ValueError exception when being
    4      used. It is intended for use by the site.py file to switch off
    5:     automatic string to Unicode coercion.
    6  
    7  Written by Marc-Andre Lemburg (mal@lemburg.com).

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/enum.py:
   14          'EnumMeta',
   15          'Enum', 'IntEnum', 'Flag', 'IntFlag',
   16:         'auto', 'unique',
   17          ]
   18  
   ..
   48      cls.__module__ = '<unknown>'
   49  
   50: _auto_null = object()
   51: class auto:
   52      """
   53      Instances are replaced with an appropriate value in Enum class suites.
   54      """
   55:     value = _auto_null
   56  
   57  
   ..
   95                  # enum overwriting a descriptor?
   96                  raise TypeError('%r already defined as: %r' % (key, self[key]))
   97:             if isinstance(value, auto):
   98:                 if value.value == _auto_null:
   99                      value.value = self._generate_next_value(key, 1, len(self._member_names), self._last_values[:])
  100                  value = value.value
  ...
  183          # we instantiate first instead of checking for duplicates first in case
  184          # a custom __new__ is doing something funky with the values -- such as
  185:         # auto-numbering ;)
  186          for member_name in classdict._member_names:
  187              value = enum_members[member_name]
  ...
  448              for base in bases[0].__mro__:
  449                  # most common: (IntEnum, int, Enum, object)
  450:                 # possible:    (<Enum 'AutoIntEnum'>, <Enum 'IntEnum'>,
  451                  #               <class 'int'>, <Enum 'Enum'>,
  452                  #               <class 'object'>)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/importlib/util.py:
   75  
   76      If the name is for submodule (contains a dot), the parent module is
   77:     automatically imported.
   78  
   79      The name and package arguments work the same as importlib.import_module().
   ..
  138      @functools.wraps(fxn)
  139      def set_package_wrapper(*args, **kwargs):
  140:         warnings.warn('The import system now takes care of this automatically.',
  141                        DeprecationWarning, stacklevel=2)
  142          module = fxn(*args, **kwargs)
  ...
  157      @functools.wraps(fxn)
  158      def set_loader_wrapper(self, *args, **kwargs):
  159:         warnings.warn('The import system now takes care of this automatically.',
  160                        DeprecationWarning, stacklevel=2)
  161          module = fxn(self, *args, **kwargs)
  ...
  184  
  185      """
  186:     warnings.warn('The import system now takes care of this automatically.',
  187                    DeprecationWarning, stacklevel=2)
  188      @functools.wraps(fxn)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/keyword.py:
    3  """Keywords (from "graminit.c")
    4  
    5: This file is automatically generated; please don't muck it up!
    6  
    7  To update the symbols in this file, 'cd' to the top directory of

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/os.py:
  649  
  650  
  651: # Change environ to automatically call putenv(), unsetenv if they exist.
  652  from _collections_abc import MutableMapping
  653  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/bs4/dammit.py:
   17  import string
   18  
   19: # Import a library to autodetect character encodings.
   20  chardet_type = None
   21  try:

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/_bashcomplete.py:
   10      COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \\
   11                     COMP_CWORD=$COMP_CWORD \\
   12:                    %(autocomplete_var)s=complete $1 ) )
   13      return 0
   14  }
   ..
   25          'complete_func': '_%s_completion' % cf_name,
   26          'script_names': prog_name,
   27:         'autocomplete_var': complete_var,
   28      }).strip() + ';'
   29  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/_compat.py:
  510  
  511  
  512: auto_wrap_for_ansi = None
  513  colorama = None
  514  get_winterm_size = None
  ...
  529  # If we're on Windows, we provide transparent integration through
  530  # colorama.  This will make ANSI colors through the echo function
  531: # work automatically.
  532  if WIN:
  533      # Windows has a smaller terminal
  ...
  556          _ansi_stream_wrappers = WeakKeyDictionary()
  557  
  558:         def auto_wrap_for_ansi(stream, color=None):
  559              """This function wraps a stream so that calls through colorama
  560              are issued to the win32 console API to recolor on demand.  It

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/_termui_impl.py:
   68          self.color = color
   69          self.width = width
   70:         self.autowidth = width == 0
   71  
   72          if length is None:
   ..
  200              buf = []
  201              # Update width in case the terminal has been resized
  202:             if self.autowidth:
  203                  old_width = self.width
  204                  self.width = 0

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/core.py:
  145                        the name of the script.
  146      :param obj: an arbitrary object of user data.
  147:     :param auto_envvar_prefix: the prefix to use for automatic environment
  148                                 variables.  If this is `None` then reading
  149                                 from environment variables is disabled.  This
  ...
  154      :param terminal_width: the width of the terminal.  The default is
  155                             inherit from parent context.  If no context
  156:                            defines the terminal width then auto
  157                             detection will be applied.
  158      :param max_content_width: the maximum width for content rendered by
  ...
  186                                   implement case insensitive behavior.
  187      :param color: controls if the terminal supports ANSI colors or not.  The
  188:                   default is autodetection.  This is only needed if ANSI
  189                    codes are used in texts that Click prints which is by
  190                    default not the case.  This for instance would affect
  ...
  193  
  194      def __init__(self, command, parent=None, info_name=None, obj=None,
  195:                  auto_envvar_prefix=None, default_map=None,
  196                   terminal_width=None, max_content_width=None,
  197                   resilient_parsing=False, allow_extra_args=None,
  ...
  242          if terminal_width is None and parent is not None:
  243              terminal_width = parent.terminal_width
  244:         #: The width of the terminal (None is autodetection).
  245          self.terminal_width = terminal_width
  246  
  ...
  301          # If there is no envvar prefix yet, but the parent has one and
  302          # the command on this level has a name, we can expand the envvar
  303:         # prefix automatically.
  304:         if auto_envvar_prefix is None:
  305              if parent is not None \
  306:                and parent.auto_envvar_prefix is not None and \
  307                 self.info_name is not None:
  308:                 auto_envvar_prefix = '%s_%s' % (parent.auto_envvar_prefix,
  309                                             self.info_name.upper())
  310          else:
  311:             self.auto_envvar_prefix = auto_envvar_prefix.upper()
  312:         self.auto_envvar_prefix = auto_envvar_prefix
  313  
  314          if color is None and parent is not None:
  ...
  359                          some situations the context only wants to be
  360                          temporarily pushed in which case this can be disabled.
  361:                         Nested pushes automatically defer the cleanup.
  362          """
  363          if not cleanup:
  ...
  424      def command_path(self):
  425          """The computed command path.  This is used for the ``usage``
  426:         information on the help page.  It's automatically created by
  427          combining the info names of the chain of contexts to the root.
  428          """
  ...
  625          """Given a context and a list of arguments this creates the parser
  626          and parses the arguments, then modifies the context as necessary.
  627:         This is automatically invoked by :meth:`make_context`.
  628          """
  629          raise NotImplementedError('Base commands do not know how to parse '
  ...
  755          #: the list of parameters for this command in the order they
  756          #: should show up in the help page and execute.  Eager parameters
  757:         #: will automatically be handled before non eager ones.
  758          self.params = params or []
  759          self.help = help
  ...
 1235      :param type: the type that should be used.  Either a :class:`ParamType`
 1236                   or a Python type.  The later is converted into the former
 1237:                  automatically if supported.
 1238      :param required: controls if this is optional or not.
 1239      :param default: the default value if omitted.  This can also be a callable,
 ....
 1325      def type_cast_value(self, ctx, value):
 1326          """Given a value this runs it properly through the type system.
 1327:         This automatically handles things like `nargs` and `multiple` as
 1328          well as composite types.
 1329          """
 ....
 1435                         input.
 1436      :param is_flag: forces this option to act as a flag.  The default is
 1437:                     auto detection.
 1438      :param flag_value: which value should be used for this flag if it's
 1439:                        enabled.  This is set to a boolean automatically if
 1440                         the option string contains a slash to mark two options.
 1441      :param multiple: if this is set to `True` then the argument is accepted
 ....
 1444                       arguments.
 1445      :param count: this flag makes an option increment an integer.
 1446:     :param allow_from_autoenv: if this is enabled then the value of this
 1447                                 parameter will be pulled from an environment
 1448                                 variable in case a prefix is defined on the
 ....
 1455                   prompt=False, confirmation_prompt=False,
 1456                   hide_input=False, is_flag=None, flag_value=None,
 1457:                  multiple=False, count=False, allow_from_autoenv=True,
 1458                   type=None, help=None, **attrs):
 1459          default_is_missing = attrs.get('default', _missing) is _missing
 ....
 1498  
 1499          self.multiple = multiple
 1500:         self.allow_from_autoenv = allow_from_autoenv
 1501          self.help = help
 1502          self.show_default = show_default
 ....
 1659          if rv is not None:
 1660              return rv
 1661:         if self.allow_from_autoenv and \
 1662:            ctx.auto_envvar_prefix is not None:
 1663:             envvar = '%s_%s' % (ctx.auto_envvar_prefix, self.name.upper())
 1664              return os.environ.get(envvar)
 1665  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/decorators.py:
   92  def command(name=None, cls=None, **attrs):
   93      """Creates a new :class:`Command` and uses the decorated function as
   94:     callback.  This will also automatically attach all decorated
   95      :func:`option`\s and :func:`argument`\s as parameters to the command.
   96  
   ..
  229  
  230      :param version: the version number to show.  If not provided Click
  231:                     attempts an auto discovery via setuptools.
  232:     :param prog_name: the name of the program (defaults to autodetection)
  233      :param message: custom message to show instead of the default
  234                      (``'%(prog)s, version %(version)s'``)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/exceptions.py:
   31      :param message: the error message to display.
   32      :param ctx: optionally the context that caused this error.  Click will
   33:                 fill in the context automatically in some situations.
   34      """
   35      exit_code = 2

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/termui.py:
  205      :param text: the text to page.
  206      :param color: controls if the pager supports ANSI colors or not.  The
  207:                   default is autodetection.
  208      """
  209      color = resolve_color_default(color)
  ...
  268      :param label: the label to show next to the progress bar.
  269      :param show_eta: enables or disables the estimated time display.  This is
  270:                      automatically disabled if the length cannot be
  271                       determined.
  272      :param show_percent: enables or disables the percentage display.  The
  ...
  293                   only the label is printed.
  294      :param color: controls if the terminal supports ANSI colors or not.  The
  295:                   default is autodetection.  This is only needed if ANSI
  296                    codes are included anywhere in the progress bar output
  297                    which is not the case by default.
  ...
  397      """Removes ANSI styling information from a string.  Usually it's not
  398      necessary to use this function as Click's echo function will
  399:     automatically remove styling if necessary.
  400  
  401      .. versionadded:: 2.0
  ...
  434  
  435      Note for Windows: to simplify cross-platform usage, the newlines are
  436:     automatically converted from POSIX to Windows and vice versa.  As such,
  437      the message here will have ``\n`` as newline markers.
  438  
  439      :param text: the text to edit.
  440:     :param editor: optionally the editor to use.  Defaults to automatic
  441                     detection.
  442      :param env: environment variables to forward to the editor.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/testing.py:
  111                         to stdout.  This is useful for showing examples in
  112                         some circumstances.  Note that regular prompts
  113:                        will automatically echo the input.
  114      """
  115  
  ...
  143          prompt functionality).
  144  
  145:         This is automatically done in the :meth:`invoke` method.
  146  
  147          .. versionadded:: 4.0

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/types.py:
  264  class File(ParamType):
  265      """Declares a parameter to be a file for reading or writing.  The file
  266:     is automatically closed once the context tears down (after the command
  267      finished working).
  268  
  ...
  322                                            self.encoding, self.errors,
  323                                            atomic=self.atomic)
  324:             # If a context is provided, we automatically close the file
  325              # at the end of the context execution (or flush out).  If a
  326              # context does not exist, it's the caller's responsibility to

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/click/utils.py:
    6  from ._compat import text_type, open_stream, get_filesystem_encoding, \
    7      get_streerror, string_types, PY2, binary_streams, text_streams, \
    8:     filename_to_ui, auto_wrap_for_ansi, strip_ansi, should_strip_ansi, \
    9      _default_text_stdout, _default_text_stderr, is_bytes, WIN
   10  
   ..
  181  
  182      -   add transparent handling of ANSI color codes on Windows.
  183:     -   hide ANSI codes automatically if the destination file is not a
  184          terminal.
  185  
  ...
  209      :param nl: if set to `True` (the default) a newline is printed afterwards.
  210      :param color: controls if the terminal supports ANSI colors or not.  The
  211:                   default is autodetection.
  212      """
  213      if file is None:
  ...
  251              message = strip_ansi(message)
  252          elif WIN:
  253:             if auto_wrap_for_ansi is not None:
  254:                 file = auto_wrap_for_ansi(file)
  255              elif not color:
  256                  message = strip_ansi(message)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/app.py:
  143                                       be relative to the instance path instead
  144                                       of the application root.
  145:     :param root_path: Flask by default will automatically calculate the path
  146                        to the root of the application.  In certain situations
  147                        this cannot be achieved (for instance if the package
  ...
  204      #: The debug flag.  Set this to ``True`` to enable debugging of the
  205      #: application.  In debug mode the debugger will kick in when an unhandled
  206:     #: exception occurs and the integrated server will automatically reload
  207      #: the application if changes in the code are detected.
  208      #:
  ...
  285      #: Options that are passed directly to the Jinja2 environment.
  286      jinja_options = ImmutableDict(
  287:         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']
  288      )
  289  
  ...
  317          'JSONIFY_PRETTYPRINT_REGULAR':          True,
  318          'JSONIFY_MIMETYPE':                     'application/json',
  319:         'TEMPLATES_AUTO_RELOAD':                None,
  320      })
  321  
  ...
  355              self.static_folder = static_folder
  356          if instance_path is None:
  357:             instance_path = self.auto_find_instance_path()
  358          elif not os.path.isabs(instance_path):
  359              raise ValueError('If an instance path is provided it must be '
  ...
  464          #: view function.  For each function registered this one should also
  465          #: provide a :meth:`url_defaults` function that adds the parameters
  466:         #: automatically again that were removed that way.
  467          #:
  468          #: .. versionadded:: 0.7
  ...
  652          return self.config_class(root_path, self.default_config)
  653  
  654:     def auto_find_instance_path(self):
  655          """Tries to locate the instance path if it was not provided to the
  656          constructor of the application class.  It will basically calculate
  ...
  679      def create_jinja_environment(self):
  680          """Creates the Jinja2 environment based on :attr:`jinja_options`
  681:         and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds
  682          the Jinja2 globals and filters after initialization.  Override
  683          this function to customize the behavior.
  ...
  685          .. versionadded:: 0.5
  686          .. versionchanged:: 0.11
  687:            ``Environment.auto_reload`` set in accordance with
  688:            ``TEMPLATES_AUTO_RELOAD`` configuration option.
  689          """
  690          options = dict(self.jinja_options)
  691:         if 'autoescape' not in options:
  692:             options['autoescape'] = self.select_jinja_autoescape
  693:         if 'auto_reload' not in options:
  694:             if self.config['TEMPLATES_AUTO_RELOAD'] is not None:
  695:                 options['auto_reload'] = self.config['TEMPLATES_AUTO_RELOAD']
  696              else:
  697:                 options['auto_reload'] = self.debug
  698          rv = self.jinja_environment(self, **options)
  699          rv.globals.update(
  ...
  733          """
  734  
  735:     def select_jinja_autoescape(self, filename):
  736:         """Returns ``True`` if autoescaping should be active for the given
  737          template name. If no template name is given, returns `True`.
  738  
  ...
  787          Instead, see :ref:`deployment` for WSGI server recommendations.
  788  
  789:         If the :attr:`debug` flag is set the server will automatically reload
  790          for code changes and show a debugger in case an exception happened.
  791  
  ...
  796  
  797          It is not recommended to use this function for development with
  798:         automatic reloading as this is badly supported.  Instead you should
  799          be using the :command:`flask` command line script's ``run`` support.
  800  
  ...
  991  
  992          .. versionchanged:: 0.6
  993:            ``OPTIONS`` is added automatically as method.
  994  
  995          :param rule: the URL rule as string
  ...
 1027  
 1028          # starting with Flask 0.8 the view_func object can disable and
 1029:         # force-enable the automatic options handling.
 1030:         provide_automatic_options = getattr(view_func,
 1031:             'provide_automatic_options', None)
 1032  
 1033:         if provide_automatic_options is None:
 1034              if 'OPTIONS' not in methods:
 1035:                 provide_automatic_options = True
 1036                  required_methods.add('OPTIONS')
 1037              else:
 1038:                 provide_automatic_options = False
 1039  
 1040          # Add the required methods now.
 ....
 1042  
 1043          rule = self.url_rule_class(rule, methods=methods, **options)
 1044:         rule.provide_automatic_options = provide_automatic_options
 1045  
 1046          self.url_map.add(rule)
 ....
 1590              self.raise_routing_exception(req)
 1591          rule = req.url_rule
 1592:         # if we provide automatic options for this URL and the
 1593:         # request came with the OPTIONS method, reply automatically
 1594:         if getattr(rule, 'provide_automatic_options', False) \
 1595             and req.method == 'OPTIONS':
 1596              return self.make_default_options_response()
 ....
 1775          """Injects the URL defaults for the given endpoint directly into
 1776          the values dictionary passed.  This is used internally and
 1777:         automatically called on URL building.
 1778  
 1779          .. versionadded:: 0.7
 ....
 1896          """Binds the application only.  For as long as the application is bound
 1897          to the current context the :data:`flask.current_app` points to that
 1898:         application.  An application context is automatically created when a
 1899          request context is pushed if necessary.
 1900  
 ....
 1991              if self.should_ignore_error(error):
 1992                  error = None
 1993:             ctx.auto_pop(error)
 1994  
 1995      def __call__(self, environ, start_response):

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/blueprints.py:
   62      def add_url_rule(self, rule, endpoint=None, view_func=None, **options):
   63          """A helper method to register a rule (and optionally a view function)
   64:         to the application.  The endpoint is automatically prefixed with the
   65          blueprint's name.
   66          """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/cli.py:
  195      necessary to interface with as it's used internally in the dispatching
  196      to click.  In future versions of Flask this object will most likely play
  197:     a bigger role.  Typically it's created automatically by the
  198      :class:`FlaskGroup` but you can also manually create it and pass it
  199      onwards as click object.
  ...
  262      """This works similar to a regular click :class:`~click.Group` but it
  263      changes the behavior of the :meth:`command` decorator so that it
  264:     automatically wraps the functions in :func:`with_appcontext`.
  265  
  266      Not to be confused with :class:`FlaskGroup`.
  ...
  377              obj = ScriptInfo(create_app=self.create_app)
  378          kwargs['obj'] = obj
  379:         kwargs.setdefault('auto_envvar_prefix', 'FLASK')
  380          return AppGroup.main(self, *args, **kwargs)
  381  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/ctx.py:
  219      (:meth:`~flask.Flask.teardown_request`).
  220  
  221:     The request context is automatically popped at the end of the request
  222      for you.  In debug mode the request context is kept around if
  223      exceptions happen so that interactive debuggers have a chance to
  ...
  355                  # If this interpreter supports clearing the exception information
  356                  # we do that now.  This will only go into effect on Python 2.x,
  357:                 # on 3.x it disappears automatically at the end of the exception
  358                  # stack.
  359                  if hasattr(sys, 'exc_clear'):
  ...
  379                  '(%r instead of %r)' % (rv, self)
  380  
  381:     def auto_pop(self, exc):
  382          if self.request.environ.get('flask._preserve_context') or \
  383             (exc is not None and self.app.preserve_context_on_exception):
  ...
  397          # the context can be force kept alive for the test client.
  398          # See flask.testing for how this works.
  399:         self.auto_pop(exc_value)
  400  
  401          if BROKEN_PYPY_CTXMGR_EXIT and exc_type is not None:

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/debughelpers.py:
   54          exc = request.routing_exception
   55          buf = ['A request was sent to this URL (%s) but a redirect was '
   56:                'issued automatically by the routing system to "%s".'
   57                 % (request.url, exc.new_url)]
   58  
   ..
   60          if request.base_url + '/' == exc.new_url.split('?')[0]:
   61              buf.append('  The URL was defined with a trailing slash so '
   62:                        'Flask will automatically redirect to the URL '
   63                         'with the trailing slash if it was accessed '
   64                         'without one.')

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/helpers.py:
  126              # iterator in we're still running the cleanup logic.  Generators
  127              # don't need that because they are closed on their destruction
  128:             # automatically.
  129              try:
  130                  for item in gen:
  ...
  445      provided.
  446  
  447:     ETags will also be attached automatically if a `filename` is provided. You
  448      can turn this off by setting `add_etags=False`.
  449  
  ...
  471  
  472      .. versionchanged:: 0.12
  473:        The filename is no longer automatically inferred from file objects. If
  474:        you want to use automatic mimetype and etag support, pass a filepath via
  475         `filename_or_fp` or `attachment_filename`.
  476  
  ...
  488                             send before calling :func:`send_file`.
  489      :param mimetype: the mimetype of the file if provided. If a file path is
  490:                      given, auto detection happens as fallback, otherwise an
  491                       error will be raised.
  492      :param as_attachment: set to ``True`` if you want to send this file with

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/json.py:
  115  
  116      This function can return ``unicode`` strings or ascii-only bytestrings by
  117:     default which coerce into unicode strings automatically.  That behavior by
  118      default is controlled by the ``JSON_AS_ASCII`` configuration variable
  119      and can be overridden by the simplejson ``ensure_ascii`` parameter.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/templating.py:
  137  def render_template_string(source, **context):
  138      """Renders a template from the given template source string
  139:     with the given context. Template variables will be autoescaped.
  140  
  141      :param source: the source code of the template to be

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask/views.py:
   58      #:
   59      #: You can place one or more decorators in this list and whenever the
   60:     #: view function is created the result is automatically decorated.
   61      #:
   62      #: .. versionadded:: 0.8
   ..
  125      particular methods.  For instance if you implement a method called
  126      :meth:`get` it means it will respond to ``'GET'`` requests and
  127:     the :meth:`dispatch_request` implementation will automatically
  128      forward your request to that.  Also :attr:`options` is set for you
  129:     automatically::
  130  
  131          class CounterAPI(MethodView):

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask_script/__init__.py:
   68      :param with_default_commands: load commands **runserver** and **shell**
   69                                    by default.
   70:     :param disable_argcomplete: disable automatic loading of argcomplete.
   71  
   72      """
   ..
  201                  self._patch_argparser(subparser)
  202  
  203:         ## enable autocomplete only for parent parser when argcomplete is
  204          ## imported and it is NOT disabled in constructor
  205          if parent is None and ARGCOMPLETE_IMPORTED \
  206                  and not self.disable_argcomplete:
  207:             argcomplete.autocomplete(parser, always_complete_options=True)
  208  
  209          self.parser = parser
  ...
  290      def option(self, *args, **kwargs):
  291          """
  292:         Decorator to add an option to a function. Automatically registers the
  293          function - do not use together with ``@command``. You can add as many
  294          ``@option`` calls as you like, for example::

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask_script/commands.py:
  324                           Defaults to False, for security.
  325  
  326:     :param use_reloader: Flag whether to use the auto-reloader.
  327                           Default to True when debugging.
  328                           This can be overriden in the command line by

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/flask_wtf/form.py:
   20  
   21  SUBMIT_METHODS = set(('POST', 'PUT', 'PATCH', 'DELETE'))
   22: _Auto = object()
   23  
   24  
   ..
   54  
   55          def wrap_formdata(self, form, formdata):
   56:             if formdata is _Auto:
   57                  if _is_submitted():
   58                      if request.files:
   ..
   75              return translations
   76  
   77:     def __init__(self, formdata=_Auto, **kwargs):
   78          csrf_enabled = kwargs.pop('csrf_enabled', None)
   79  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/googlemaps/client.py:
  337  from googlemaps.places import place
  338  from googlemaps.places import places_photo
  339: from googlemaps.places import places_autocomplete
  340: from googlemaps.places import places_autocomplete_query
  341  
  342  
  ...
  380  Client.place = make_api_method(place)
  381  Client.places_photo = make_api_method(places_photo)
  382: Client.places_autocomplete = make_api_method(places_autocomplete)
  383: Client.places_autocomplete_query = make_api_method(places_autocomplete_query)
  384  
  385  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/googlemaps/places.py:
  298  
  299  
  300: def places_autocomplete(client, input_text, offset=None, location=None,
  301                          radius=None, language=None, type=None,
  302                          components=None):
  ...
  326      :param type: Restricts the results to places matching the specified type.
  327          The full list of supported types is available here:
  328:         https://developers.google.com/places/web-service/autocomplete#place_types
  329      :type type: string
  330  
  ...
  337  
  338      """
  339:     return _autocomplete(client, "", input_text, offset=offset,
  340                           location=location, radius=radius, language=language,
  341                           type=type, components=components)
  342  
  343  
  344: def places_autocomplete_query(client, input_text, offset=None, location=None,
  345                                radius=None, language=None):
  346      """
  ...
  368      :rtype: list of predictions
  369      """
  370:     return _autocomplete(client, "query", input_text, offset=offset,
  371                           location=location, radius=radius, language=language)
  372  
  373  
  374: def _autocomplete(client, url_part, input_text, offset=None, location=None,
  375                    radius=None, language=None, type=None, components=None):
  376      """
  377:     Internal handler for ``autocomplete`` and ``autocomplete_query``.
  378      See each method's docs for arg details.
  379      """
  ...
  394          params["components"] = convert.components(components)
  395  
  396:     url = "/maps/api/place/%sautocomplete/json" % url_part
  397      return client._request(url, params)["predictions"]
  398  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/argparse_compat.py:
 1540      Keyword Arguments:
 1541          - prog -- The name of the program (default: sys.argv[0])
 1542:         - usage -- A usage message (default: auto-generated from arguments)
 1543          - description -- A description of what the program does
 1544          - epilog -- Text following the argument descriptions

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/config.py:
   49  
   50  
   51: def auto_int(_, x):
   52      if x.startswith('0') and not x.lower().startswith('0x'):
   53          # for compatible with octal numbers in python3
   ..
  162              uri = LoggerClass.default
  163  
  164:         # if default logger is in use, and statsd is on, automagically switch
  165          # to the statsd logger
  166          if uri == LoggerClass.default:
  ...
  671  
  672          Any value greater than zero will limit the number of requests a work
  673:         will process before automatically restarting. This is a simple method
  674          to help limit the damage of memory leaks.
  675  
  676:         If this is set to zero (the default) then the automatic worker
  677          restarts are disabled.
  678          """
  ...
  844      meta = "STRING"
  845      validator = validate_reload_engine
  846:     default = "auto"
  847      desc = """\
  848          The implementation that should be used to power :ref:`reload`.
  ...
  850          Valid engines are:
  851  
  852:         * 'auto'
  853          * 'poll'
  854          * 'inotify' (requires inotify)
  ...
 1041      meta = "INT"
 1042      validator = validate_pos_int
 1043:     type = auto_int
 1044      default = 0
 1045      desc = """\

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/reloader.py:
  118  
  119  reloader_engines = {
  120:     'auto': preferred_reloader,
  121      'poll': Reloader,
  122      'inotify': InotifyReloader,

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/workers/async.py:
   98              self.nr += 1
   99              if self.alive and self.nr >= self.max_requests:
  100:                 self.log.info("Autorestarting worker after current request.")
  101                  resp.force_close()
  102                  self.alive = False

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/workers/gthread.py:
  322              self.nr += 1
  323              if self.alive and self.nr >= self.max_requests:
  324:                 self.log.info("Autorestarting worker after current request.")
  325                  resp.force_close()
  326                  self.alive = False

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/workers/gtornado.py:
   40          self.nr += 1
   41          if self.alive and self.nr >= self.max_requests:
   42:             self.log.info("Autorestarting worker after current request.")
   43              self.alive = False
   44  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/gunicorn/workers/sync.py:
  172              self.nr += 1
  173              if self.nr >= self.max_requests:
  174:                 self.log.info("Autorestarting worker after current request.")
  175                  self.alive = False
  176              respiter = self.wsgi(environ, resp.start_response)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/itsdangerous.py:
  546          """Dumps the encoded object.  The return value is always a
  547          bytestring.  If the internal serializer is text based the value
  548:         will automatically be encoded to utf-8.
  549          """
  550          return want_bytes(self.serializer.dumps(obj))

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/__init__.py:
   56  from jinja2.utils import Markup, escape, clear_caches, \
   57       environmentfunction, evalcontextfunction, contextfunction, \
   58:      is_undefined, select_autoescape
   59  
   60  __all__ = [
   ..
   68      'environmentfunction', 'contextfunction', 'clear_caches', 'is_undefined',
   69      'evalcontextfilter', 'evalcontextfunction', 'make_logging_undefined',
   70:     'select_autoescape',
   71  ]
   72  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/asyncfilters.py:
    1  from functools import wraps
    2  
    3: from jinja2.asyncsupport import auto_aiter
    4  from jinja2 import filters
    5  
    6  
    7: async def auto_to_seq(value):
    8      seq = []
    9      if hasattr(value, '__aiter__'):
   ..
   20          args, kwargs, modfunc, lookup_attr)
   21      if seq:
   22:         async for item in auto_aiter(seq):
   23              if func(item):
   24                  yield item
   ..
   62  async def do_first(environment, seq):
   63      try:
   64:         return await auto_aiter(seq).__anext__()
   65      except StopAsyncIteration:
   66          return environment.undefined('No first item, sequence was empty.')
   ..
   70  async def do_groupby(environment, value, attribute):
   71      expr = filters.make_attrgetter(environment, attribute)
   72:     return [filters._GroupTuple(key, await auto_to_seq(values))
   73              for key, values in filters.groupby(sorted(
   74:                 await auto_to_seq(value), key=expr), expr)]
   75  
   76  
   77  @asyncfiltervariant(filters.do_join)
   78  async def do_join(eval_ctx, value, d=u'', attribute=None):
   79:     return filters.do_join(eval_ctx, await auto_to_seq(value), d, attribute)
   80  
   81  
   82  @asyncfiltervariant(filters.do_list)
   83  async def do_list(value):
   84:     return await auto_to_seq(value)
   85  
   86  
   ..
  109      seq, func = filters.prepare_map(args, kwargs)
  110      if seq:
  111:         async for item in auto_aiter(seq):
  112              yield func(item)
  113  
  ...
  120      else:
  121          func = lambda x: x
  122:     async for item in auto_aiter(iterable):
  123          rv += func(item)
  124      return rv
  ...
  127  @asyncfiltervariant(filters.do_slice)
  128  async def do_slice(value, slices, fill_with=None):
  129:     return filters.do_slice(await auto_to_seq(value), slices, fill_with)
  130  
  131  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/asyncsupport.py:
   84      async def async_call(self):
   85          rv = await concat_async(self._stack[self._depth](self._context))
   86:         if self._context.eval_ctx.autoescape:
   87              rv = Markup(rv)
   88          return rv
   ..
   99  def wrap_macro_invoke(original_invoke):
  100      @internalcode
  101:     async def async_invoke(self, arguments, autoescape):
  102          rv = await self._func(*arguments)
  103:         if autoescape:
  104              rv = Markup(rv)
  105          return rv
  106  
  107      @internalcode
  108:     def _invoke(self, arguments, autoescape):
  109          if not self._environment.is_async:
  110:             return original_invoke(self, arguments, autoescape)
  111:         return async_invoke(self, arguments, autoescape)
  112      return update_wrapper(_invoke, original_invoke)
  113  
  ...
  173  
  174  
  175: async def auto_await(value):
  176      if inspect.isawaitable(value):
  177          return await value
  ...
  179  
  180  
  181: async def auto_aiter(iterable):
  182      if hasattr(iterable, '__aiter__'):
  183          async for item in iterable:
  ...
  247          else:
  248              length = None
  249:     async_iterator = auto_aiter(iterable)
  250      try:
  251          after = await async_iterator.__anext__()

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/bccache.py:
   63  
   64      The buckets get an internal checksum from the cache assigned and use this
   65:     to automatically reject outdated cache material.  Individual bytecode
   66      cache subclasses don't have to care about cache invalidation.
   67      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/compiler.py:
  323          if not force_unescaped:
  324              if frame.eval_ctx.volatile:
  325:                 self.writeline('if context.eval_ctx.autoescape:')
  326                  self.indent()
  327                  self.writeline('return Markup(concat(%s))' % frame.buffer)
  ...
  332                  self.outdent()
  333                  return
  334:             elif frame.eval_ctx.autoescape:
  335                  self.writeline('return Markup(concat(%s))' % frame.buffer)
  336                  return
  ...
  365      def blockvisit(self, nodes, frame):
  366          """Visit a list of nodes as block in a frame.  If the current frame
  367:         is no buffer a dummy ``if 0: yield None`` is written automatically.
  368          """
  369          try:
  ...
  403      def signature(self, node, frame, extra_kwargs=None):
  404          """Writes a function call to the stream for the current node.
  405:         A leading comma is added automatically.  The extra keyword
  406          arguments may not include python keywords otherwise a syntax
  407          error could occour.  The extra keyword arguments should be given
  ...
  581              arg_tuple += ','
  582          self.write('Macro(environment, macro, %r, (%s), %r, %r, %r, '
  583:                    'context.eval_ctx.autoescape)' %
  584                     (name, arg_tuple, macro_ref.accesses_kwargs,
  585                      macro_ref.accesses_varargs, macro_ref.accesses_caller))
  ...
  675  
  676          if self.environment.is_async:
  677:             self.writeline('from jinja2.asyncsupport import auto_await, '
  678:                            'auto_aiter, make_async_loop_context')
  679  
  680          # if we want a deferred initialization we cannot move the
  ...
 1021              self.visit(node.target, loop_frame)
 1022              self.write(' in ')
 1023:             self.write(self.environment.is_async and 'auto_aiter(fiter)' or 'fiter')
 1024              self.write(':')
 1025              self.indent()
 ....
 1075          else:
 1076              if self.environment.is_async and not extended_loop:
 1077:                 self.write('auto_aiter(')
 1078              self.visit(node.iter, frame)
 1079              if self.environment.is_async and not extended_loop:
 ....
 1115              self.write('loop(')
 1116              if self.environment.is_async:
 1117:                 self.write('auto_aiter(')
 1118              self.visit(node.iter, frame)
 1119              if self.environment.is_async:
 ....
 1224              # at that point.
 1225              try:
 1226:                 if frame.eval_ctx.autoescape:
 1227                      if hasattr(const, '__html__'):
 1228                          const = const.__html__()
 ....
 1263                      close = 1
 1264                      if frame.eval_ctx.volatile:
 1265:                         self.write('(escape if context.eval_ctx.autoescape'
 1266                                     ' else to_string)(')
 1267:                     elif frame.eval_ctx.autoescape:
 1268                          self.write('escape(')
 1269                      else:
 ....
 1301                  close = 0
 1302                  if frame.eval_ctx.volatile:
 1303:                     self.write('(escape if context.eval_ctx.autoescape else'
 1304                                 ' to_string)(')
 1305                      close += 1
 1306:                 elif frame.eval_ctx.autoescape:
 1307                      self.write('escape(')
 1308                      close += 1
 ....
 1348          self.newline(node)
 1349          self.visit(node.target, frame)
 1350:         self.write(' = (Markup if context.eval_ctx.autoescape '
 1351                     'else identity)(concat(%s))' % block_frame.buffer)
 1352          self.pop_assign_tracking(frame)
 ....
 1385              self.write(repr(node.as_const(frame.eval_ctx)))
 1386          except nodes.Impossible:
 1387:             self.write('(Markup if context.eval_ctx.autoescape else identity)(%r)'
 1388                         % node.data)
 1389  
 ....
 1464              func_name = '(context.eval_ctx.volatile and' \
 1465                          ' markup_join or unicode_join)'
 1466:         elif frame.eval_ctx.autoescape:
 1467              func_name = 'markup_join'
 1468          else:
 ....
 1518      def visit_Filter(self, node, frame):
 1519          if self.environment.is_async:
 1520:             self.write('await auto_await(')
 1521          self.write(self.filters[node.name] + '(')
 1522          func = self.environment.filters.get(node.name)
 ....
 1535              self.visit(node.node, frame)
 1536          elif frame.eval_ctx.volatile:
 1537:             self.write('(context.eval_ctx.autoescape and'
 1538                         ' Markup(concat(%s)) or concat(%s))' %
 1539                         (frame.buffer, frame.buffer))
 1540:         elif frame.eval_ctx.autoescape:
 1541              self.write('Markup(concat(%s))' % frame.buffer)
 1542          else:
 ....
 1576      def visit_Call(self, node, frame, forward_caller=False):
 1577          if self.environment.is_async:
 1578:             self.write('await auto_await(')
 1579          if self.environment.sandboxed:
 1580              self.write('environment.call(context, ')
 ....
 1599          self.write(')')
 1600  
 1601:     def visit_MarkSafeIfAutoescape(self, node, frame):
 1602:         self.write('(context.eval_ctx.autoescape and Markup or identity)(')
 1603          self.visit(node.expr, frame)
 1604          self.write(')')

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/debug.py:
  153  
  154  def translate_exception(exc_info, initial_skip=0):
  155:     """If passed an exc_info it will automatically rewrite the exceptions
  156      all the way down to the correct line numbers and frames.
  157      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/environment.py:
  189              ``None`` implicitly into an empty string here.
  190  
  191:         `autoescape`
  192:             If set to ``True`` the XML/HTML autoescaping feature is enabled by
  193:             default.  For more details about autoescaping see
  194              :class:`~jinja2.utils.Markup`.  As of Jinja 2.4 this can also
  195              be a callable that is passed the template name and has to
  196:             return ``True`` or ``False`` depending on autoescape should be
  197              enabled by default.
  198  
  199              .. versionchanged:: 2.4
  200:                `autoescape` can now be a function
  201  
  202          `loader`
  ...
  213                 The cache size was increased to 400 from a low 50.
  214  
  215:         `auto_reload`
  216              Some loaders load templates from locations where the template
  217              sources may change (ie: file system or database).  If
  218:             ``auto_reload`` is set to ``True`` (default) every time a template is
  219              requested the loader checks if the source changed and if yes, it
  220              will reload the template.  For higher performance it's possible to
  ...
  279                   undefined=Undefined,
  280                   finalize=None,
  281:                  autoescape=False,
  282                   loader=None,
  283                   cache_size=400,
  284:                  auto_reload=True,
  285                   bytecode_cache=None,
  286                   enable_async=False):
  ...
  314          self.optimized = optimized
  315          self.finalize = finalize
  316:         self.autoescape = autoescape
  317  
  318          # defaults
  ...
  325          self.cache = create_cache(cache_size)
  326          self.bytecode_cache = bytecode_cache
  327:         self.auto_reload = auto_reload
  328  
  329          # configurable policies
  ...
  360                  trim_blocks=missing, lstrip_blocks=missing,
  361                  extensions=missing, optimized=missing,
  362:                 undefined=missing, finalize=missing, autoescape=missing,
  363:                 loader=missing, cache_size=missing, auto_reload=missing,
  364                  bytecode_cache=missing):
  365          """Create a new overlay environment that shares all the data with the
  366          current environment except for cache and the overridden attributes.
  367          Extensions cannot be removed for an overlayed environment.  An overlayed
  368:         environment automatically gets all the extensions of the environment it
  369          is linked to plus optional extra extensions.
  370  
  ...
  515  
  516      def preprocess(self, source, name=None, filename=None):
  517:         """Preprocesses the source with all extensions.  This is automatically
  518          called for all parsing and compiling methods but *not* for :meth:`lex`
  519          because there you usually only want the actual source tokenized.
  ...
  799          if self.cache is not None:
  800              template = self.cache.get(cache_key)
  801:             if template is not None and (not self.auto_reload or
  802                                           template.is_up_to_date):
  803                  return template
  ...
  934                  undefined=Undefined,
  935                  finalize=None,
  936:                 autoescape=False,
  937                  enable_async=False):
  938          env = get_spontaneous_environment(
  ...
  941              line_statement_prefix, line_comment_prefix, trim_blocks,
  942              lstrip_blocks, newline_sequence, keep_trailing_newline,
  943:             frozenset(extensions), optimized, undefined, finalize, autoescape,
  944              None, 0, False, None, enable_async)
  945          return env.from_string(source, template_class=cls)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/ext.py:
  137      def gettext(__context, __string, **variables):
  138          rv = __context.call(func, __string)
  139:         if __context.eval_ctx.autoescape:
  140              rv = Markup(rv)
  141          return rv % variables
  ...
  148          variables.setdefault('num', __num)
  149          rv = __context.call(func, __singular, __plural, __num)
  150:         if __context.eval_ctx.autoescape:
  151              rv = Markup(rv)
  152          return rv % variables
  ...
  365  
  366          # in case newstyle gettext is used, the method is powerful
  367:         # enough to handle the variable expansion and autoescape
  368          # handling itself
  369          if self.environment.newstyle_gettext:
  ...
  378          else:
  379              # mark the return value as safe if we are in an
  380:             # environment with autoescaping turned on
  381:             node = nodes.MarkSafeIfAutoescape(node)
  382              if variables:
  383                  node = nodes.Mod(node, nodes.Dict([
  ...
  415  
  416  
  417: class AutoEscapeExtension(Extension):
  418      pass
  419  
  ...
  581          frozenset(extensions),
  582          cache_size=0,
  583:         auto_reload=False
  584      )
  585  
  ...
  607  loopcontrols = LoopControlExtension
  608  with_ = WithExtension
  609: autoescape = AutoEscapeExtension
  610  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/filters.py:
  118      if count is None:
  119          count = -1
  120:     if not eval_ctx.autoescape:
  121          return text_type(s).replace(text_type(old), text_type(new), count)
  122      if hasattr(old, '__html__') or hasattr(new, '__html__') and \
  ...
  139  
  140  @evalcontextfilter
  141: def do_xmlattr(_eval_ctx, d, autospace=True):
  142      """Create an SGML/XML attribute string based on the items in a dict.
  143:     All values that are neither `none` nor `undefined` are automatically
  144      escaped:
  145  
  ...
  159          </ul>
  160  
  161:     As you can see it automatically prepends a space in front of the item
  162      if the filter returned something unless the second parameter is false.
  163      """
  ...
  167          if value is not None and not isinstance(value, Undefined)
  168      )
  169:     if autospace and rv:
  170          rv = u' ' + rv
  171:     if _eval_ctx.autoescape:
  172          rv = Markup(rv)
  173      return rv
  ...
  313          value = imap(make_attrgetter(eval_ctx.environment, attribute), value)
  314  
  315:     # no automatic escaping?  joining is a lot eaiser then
  316:     if not eval_ctx.autoescape:
  317          return text_type(d).join(imap(text_type, value))
  318  
  ...
  441      rel = ' '.join(sorted(rel)) or None
  442      rv = urlize(value, trim_url_limit, rel=rel, target=target)
  443:     if eval_ctx.autoescape:
  444          rv = Markup(rv)
  445      return rv
  ...
  691  # Use a regular tuple repr here.  This is what we did in the past and we
  692  # really want to hide this custom type as much as possible.  In particular
  693: # we do not want to accidentally expose an auto generated repr in case
  694  # people start to print this out in comments or something similar for
  695  # debugging.
  ...
  771  
  772  def do_mark_safe(value):
  773:     """Mark the value as safe which means that in an environment with automatic
  774      escaping enabled this variable will not be escaped.
  775      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/lexer.py:
  413  
  414  class Lexer(object):
  415:     """Class that implements a lexer for a given environment. Automatically
  416      created by the environment class, usually you don't have to do that.
  417  
  418:     Note that the lexer is not automatically bound to an environment.
  419      Multiple environments can share the same lexer.
  420      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/loaders.py:
   80          if no loader extension is used.
   81  
   82:         The last item in the tuple is the `uptodate` function.  If auto
   83          reloading is enabled it's always called to check if the template
   84          changed.  No arguments are passed so the function must store the
   ..
  274      >>> loader = DictLoader({'index.html': 'source here'})
  275  
  276:     Because auto reloading is rarely useful this is disabled per default.
  277      """
  278  
  ...
  302      >>> loader = FunctionLoader(load_template)
  303  
  304:     The `uptodatefunc` is a function that is called if autoreload is enabled
  305      and has to return `True` if the template is still up to date.  For more
  306      details have a look at :meth:`BaseLoader.get_source` which has the same

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/nodes.py:
   60      """A metaclass for nodes that handles the field and attribute
   61      inheritance.  fields and attributes from the parent class are
   62:     automatically forwarded to the child."""
   63  
   64      def __new__(cls, name, bases, d):
   ..
   81      def __init__(self, environment, template_name=None):
   82          self.environment = environment
   83:         if callable(environment.autoescape):
   84:             self.autoescape = environment.autoescape(template_name)
   85          else:
   86:             self.autoescape = environment.autoescape
   87          self.volatile = False
   88  
   ..
  119      two attributes: `lineno` (the line number of the node) and `environment`.
  120      The `environment` attribute is set at the end of the parsing process for
  121:     all nodes automatically.
  122      """
  123      fields = ()
  ...
  509          if eval_ctx.volatile:
  510              raise Impossible()
  511:         if eval_ctx.autoescape:
  512              return Markup(self.data)
  513          return self.data
  ...
  871  
  872  
  873: class MarkSafeIfAutoescape(Expr):
  874      """Mark the wrapped expression as safe (wrap it as `Markup`) but
  875:     only if autoescaping is active.
  876  
  877      .. versionadded:: 2.5
  ...
  884              raise Impossible()
  885          expr = self.expr.as_const(eval_ctx)
  886:         if eval_ctx.autoescape:
  887              return Markup(expr)
  888          return expr
  ...
  919      a :class:`Keyword` has to be added to the :attr:`options` list.
  920  
  921:     Example to change the `autoescape` setting::
  922  
  923:         EvalContextModifier(options=[Keyword('autoescape', Const(True))])
  924      """
  925      fields = ('options',)

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/parser.py:
   17  _statement_keywords = frozenset(['for', 'if', 'block', 'extends', 'print',
   18                                   'macro', 'include', 'from', 'import',
   19:                                  'set', 'with', 'autoescape'])
   20  _compare_operators = frozenset(['eq', 'ne', 'lt', 'lteq', 'gt', 'gteq'])
   21  
   ..
  244          return node
  245  
  246:     def parse_autoescape(self):
  247          node = nodes.ScopedEvalContextModifier(lineno=next(self.stream).lineno)
  248          node.options = [
  249:             nodes.Keyword('autoescape', self.parse_expression())
  250          ]
  251:         node.body = self.parse_statements(('name:endautoescape',),
  252                                              drop_needle=True)
  253          return nodes.Scope([node])

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/runtime.py:
  134      values passed to the template and also the names the template exports.
  135      Creating instances is neither supported nor useful as it's created
  136:     automatically at various stages of the template evaluation and should not
  137      be created by hand.
  138  
  ...
  342      def __call__(self):
  343          rv = concat(self._stack[self._depth](self._context))
  344:         if self._context.eval_ctx.autoescape:
  345              rv = Markup(rv)
  346          return rv
  ...
  459      def __init__(self, environment, func, name, arguments,
  460                   catch_kwargs, catch_varargs, caller,
  461:                  default_autoescape=None):
  462          self._environment = environment
  463          self._func = func
  ...
  469          self.caller = caller
  470          self.explicit_caller = 'caller' in arguments
  471:         if default_autoescape is None:
  472:             default_autoescape = environment.autoescape
  473:         self._default_autoescape = default_autoescape
  474  
  475      @internalcode
  ...
  492          # argument to callables otherwise anwyays.  Worst case here is
  493          # that if no eval context is passed we fall back to the compile
  494:         # time autoescape flag.
  495          if args and isinstance(args[0], EvalContext):
  496:             autoescape = args[0].autoescape
  497              args = args[1:]
  498          else:
  499:             autoescape = self._default_autoescape
  500  
  501          # try to consume the positional arguments
  ...
  547                              (self.name, len(self.arguments)))
  548  
  549:         return self._invoke(arguments, autoescape)
  550  
  551:     def _invoke(self, arguments, autoescape):
  552          """This method is being swapped out by the async implementation."""
  553          rv = self._func(*arguments)
  554:         if autoescape:
  555              rv = Markup(rv)
  556          return rv

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/jinja2/utils.py:
  489  
  490  
  491: def select_autoescape(enabled_extensions=('html', 'htm', 'xml'),
  492                        disabled_extensions=(),
  493                        default_for_string=True,
  494                        default=False):
  495:     """Intelligently sets the initial value of autoescaping based on the
  496      filename of the template.  This is the recommended way to configure
  497:     autoescaping if you do not want to write a custom function yourself.
  498  
  499      If you want to enable it for all templates created from strings or
  500      for all templates with `.html` and `.xml` extensions::
  501  
  502:         from jinja2 import Environment, select_autoescape
  503:         env = Environment(autoescape=select_autoescape(
  504              enabled_extensions=('html', 'xml'),
  505              default_for_string=True,
  ...
  509      ends with `.txt`::
  510  
  511:         from jinja2 import Environment, select_autoescape
  512:         env = Environment(autoescape=select_autoescape(
  513              disabled_extensions=('txt',),
  514              default_for_string=True,
  ...
  517  
  518      The `enabled_extensions` is an iterable of all the extensions that
  519:     autoescaping should be enabled for.  Likewise `disabled_extensions` is
  520      a list of all templates it should be disabled for.  If a template is
  521      loaded from a string then the default from `default_for_string` is used.
  522:     If nothing matches then the initial value of autoescaping is set to the
  523      value of `default`.
  524  
  ...
  531      disabled_patterns = tuple('.' + x.lstrip('.').lower()
  532                                for x in disabled_extensions)
  533:     def autoescape(template_name):
  534          if template_name is None:
  535              return default_for_string
  ...
  540              return False
  541          return default
  542:     return autoescape
  543  
  544  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/markupsafe/_speedups.c:
    3   * ~~~~~~~~~~~~~~~~~~~~
    4   *
    5:  * This module implements functions for automatic escaping in C for better
    6   * performance.
    7   *

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/__init__.py:
   53  
   54  
   55: def autocomplete():
   56      """Command and option completion for the main option parser (and options)
   57      and its subcommands (and options).
   ..
   60      """
   61      # Don't complete if user hasn't sourced bash_completion file.
   62:     if 'PIP_AUTO_COMPLETE' not in os.environ:
   63          return
   64      cwords = os.environ['COMP_WORDS'].split()[1:]
   ..
  214      deprecation.install_warning_logger()
  215  
  216:     autocomplete()
  217  
  218      try:
  ...
  224  
  225      # Needed for locale.getpreferredencoding(False) to work
  226:     # in pip.utils.encoding.auto_decode
  227      try:
  228          locale.setlocale(locale.LC_ALL, '')

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/cachecontrol/heuristics.py:
   85  
   86      def warning(self, response):
   87:         tmpl = '110 - Automatically cached for %s. Response might be stale'
   88          return tmpl % self.delta
   89  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/colorama/ansitowin32.py:
   50      ANSI_OSC_RE = re.compile('\001?\033\]((?:.|;)*?)(\x07)\002?')         # Operating System Command
   51  
   52:     def __init__(self, wrapped, convert=None, strip=None, autoreset=False):
   53          # The wrapped stream (normally sys.stdout or sys.stderr)
   54          self.wrapped = wrapped
   55  
   56          # should we reset colors to defaults after every .write()
   57:         self.autoreset = autoreset
   58  
   59          # create the proxy wrapping our output stream
   ..
   89          wrapping stdout is not actually required. This will generally be
   90          False on non-Windows platforms, unless optional functionality like
   91:         autoreset has been requested using kwargs to init()
   92          '''
   93:         return self.convert or self.strip or self.autoreset
   94  
   95      def get_win32_calls(self):
   ..
  143              self.wrapped.write(text)
  144              self.wrapped.flush()
  145:         if self.autoreset:
  146              self.reset_all()
  147  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/colorama/initialise.py:
   21  
   22  
   23: def init(autoreset=False, convert=None, strip=None, wrap=True):
   24  
   25:     if not wrap and any([autoreset, convert, strip]):
   26          raise ValueError('wrap=False conflicts with any other arg=True')
   27  
   ..
   36      else:
   37          sys.stdout = wrapped_stdout = \
   38:             wrap_stream(orig_stdout, convert, strip, autoreset, wrap)
   39      if sys.stderr is None:
   40          wrapped_stderr = None
   41      else:
   42          sys.stderr = wrapped_stderr = \
   43:             wrap_stream(orig_stderr, convert, strip, autoreset, wrap)
   44  
   45      global atexit_done
   ..
   72  
   73  
   74: def wrap_stream(stream, convert, strip, autoreset, wrap):
   75      if wrap:
   76          wrapper = AnsiToWin32(stream,
   77:             convert=convert, strip=strip, autoreset=autoreset)
   78          if wrapper.should_wrap():
   79              stream = wrapper.stream

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/distlib/metadata.py:
  237      """The legacy metadata of a release.
  238  
  239:     Supports versions 1.0, 1.1 and 1.2 (auto-detected). You can
  240      instantiate the class with one of these arguments (or none):
  241      - *path*, the path to a metadata file

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/distlib/version.py:
  467      those version during PyCon 2009, 4287 of them:
  468      - 2312 (53.93%) match NormalizedVersion without change
  469:       with the automatic suggestion
  470      - 3474 (81.04%) match when using this suggestion method
  471  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/html5lib/_tokenizer.py:
 1094      def bogusCommentState(self):
 1095          # Make a new comment token and give it as value all the characters
 1096:         # until the first > or EOF (charsUntil checks for EOF automatically)
 1097          # and emit it.
 1098          data = self.stream.charsUntil(">")

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/html5lib/constants.py:
  592      "style": frozenset(["scoped"]),
  593      "img": frozenset(["ismap"]),
  594:     "audio": frozenset(["autoplay", "controls"]),
  595:     "video": frozenset(["autoplay", "controls"]),
  596      "script": frozenset(["defer", "async"]),
  597      "details": frozenset(["open"]),
  ...
  599      "command": frozenset(["hidden", "disabled", "checked", "default"]),
  600      "hr": frozenset(["noshade"]),
  601:     "menu": frozenset(["autosubmit"]),
  602      "fieldset": frozenset(["disabled", "readonly"]),
  603      "option": frozenset(["disabled", "readonly", "selected"]),
  604      "optgroup": frozenset(["disabled", "readonly"]),
  605:     "button": frozenset(["disabled", "autofocus"]),
  606:     "input": frozenset(["disabled", "readonly", "required", "autofocus", "checked", "ismap"]),
  607:     "select": frozenset(["disabled", "readonly", "autofocus", "multiple"]),
  608      "output": frozenset(["disabled", "readonly"]),
  609  }

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/html5lib/filters/sanitizer.py:
  185      (None, 'align'),
  186      (None, 'alt'),
  187:     (None, 'autocomplete'),
  188:     (None, 'autofocus'),
  189      (None, 'axis'),
  190      (None, 'background'),
  ...
  603  
  604  allowed_css_keywords = frozenset((
  605:     'auto',
  606      'aqua',
  607      'black',

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py:
  891          directories. The `full_env`, if supplied, should be an ``Environment``
  892          contains all currently-available distributions.  If `full_env` is not
  893:         supplied, one is created automatically from the ``WorkingSet`` this
  894          method is called on, which will typically mean that every directory on
  895          ``sys.path`` will be scanned for distributions.
  ...
 1352          generally only be called when the extraction path is a temporary
 1353          directory exclusive to a single process.  This method is not
 1354:         automatically called; you must call it explicitly or register it as an
 1355          ``atexit`` function if you wish to ensure cleanup of a temporary
 1356          directory used for extractions.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/pyparsing.py:
   34  Here is a program to parse "Hello, World!" (or any greeting of the form 
   35  C{"<salutation>, <addressee>!"}), built up using L{Word}, L{Literal}, and L{And} elements 
   36: (L{'+'<ParserElement.__add__>} operator gives L{And} expressions, strings are auto-converted to
   37  L{Literal} expressions)::
   38  
   ..
 4273          print(OneOrMore(attr_expr).parseString(text).dump())
 4274          
 4275:         # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
 4276          result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
 4277          print(result.dump())

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/cacert.pem:
 2854  -----END CERTIFICATE-----
 2855  
 2856: # Issuer: CN=Autoridad de Certificacion Firmaprofesional CIF A62634068
 2857: # Subject: CN=Autoridad de Certificacion Firmaprofesional CIF A62634068
 2858: # Label: "Autoridad de Certificacion Firmaprofesional CIF A62634068"
 2859  # Serial: 6047274297262753887
 2860  # MD5 Fingerprint: 73:3a:74:7a:ec:bb:a3:96:a6:c2:e4:e2:c8:9b:c0:c3
 ....
 3278  -----END CERTIFICATE-----
 3279  
 3280: # Issuer: CN=Certinomis - Autorité Racine O=Certinomis OU=0002 433998903
 3281: # Subject: CN=Certinomis - Autorité Racine O=Certinomis OU=0002 433998903
 3282: # Label: "Certinomis - Autorité Racine"
 3283  # Serial: 1
 3284  # MD5 Fingerprint: 7f:30:78:8c:03:e3:ca:c9:0a:e2:c9:ea:1e:aa:55:1a
 ....
 3885  -----END CERTIFICATE-----
 3886  
 3887: # Issuer: CN=Autoridad de Certificacion Raiz del Estado Venezolano O=Sistema Nacional de Certificacion Electronica OU=Superintendencia de Servicios de Certificacion Electronica
 3888  # Subject: CN=PSCProcert O=Sistema Nacional de Certificacion Electronica OU=Proveedor de Certificados PROCERT
 3889  # Label: "PSCProcert"

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/models.py:
   36  from .status_codes import codes
   37  
   38: #: The set of HTTP status codes that indicate an automatically
   39  #: processable redirect.
   40  REDIRECT_STATI = (
   ..
  639      def is_redirect(self):
  640          """True if this Response is a well-formed HTTP redirect that could have
  641:         been processed automatically (by :meth:`Session.resolve_redirects`).
  642          """
  643          return ('location' in self.headers and self.status_code in REDIRECT_STATI)
  ...
  783              return str('')
  784  
  785:         # Fallback to auto-detected encoding.
  786          if self.encoding is None:
  787              encoding = self.apparent_encoding

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/packages/chardet/hebrewprober.py:
  215          # that case is not an indication for either Logical or Visual text.
  216          #
  217:         # We automatically filter out all 7-bit characters (replace them with
  218          # spaces) so the word boundary detection works properly. [MAP]
  219  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/connection.py:
  162              self._tunnel()
  163              # Mark this connection as not reusable
  164:             self.auto_open = 0
  165  
  166      def connect(self):
  ...
  267              self._tunnel()
  268              # Mark this connection as not reusable
  269:             self.auto_open = 0
  270  
  271              # Override the host with the one we're requesting data from.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/connectionpool.py:
  249              log.info("Resetting dropped connection: %s", self.host)
  250              conn.close()
  251:             if getattr(conn, 'auto_open', 1) == 0:
  252                  # This is a proxied connection that has been mutated by
  253                  # httplib._tunnel() and cannot be reused (since it would
  ...
  499  
  500          :param redirect:
  501:             If True, automatically handle redirects (status codes 301, 302,
  502              303, 307, 308). Each redirect counts as a retry. Disabling retries
  503              will disable redirect, too.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/contrib/appengine.py:
  158  
  159          if is_prod_appengine():
  160:             # Production GAE handles deflate encoding automatically, but does
  161              # not remove the encoding header.
  162              content_encoding = urlfetch_resp.headers.get('content-encoding')

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/contrib/socks.py:
  119  # urllib3/connection.py here because the HTTPSConnection will already have been
  120  # correctly set to either the Verified or Unverified form by that module. This
  121: # means the SOCKSHTTPSConnection will automatically be the correct type.
  122  class SOCKSHTTPSConnection(SOCKSConnection, HTTPSConnection):
  123      pass

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/exceptions.py:
   46  
   47  class DecodeError(HTTPError):
   48:     "Raised when automatic decoding based on Content-Type fails."
   49      pass
   50  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/requests/utils.py:
  211      the list may include quoted-strings.  A quoted-string could
  212      contain a comma.  A non-quoted string could have quotes in the
  213:     middle.  Quotes are removed automatically after parsing.
  214  
  215      It basically works like :func:`parse_set_header` just that items

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/webencodings/labels.py:
   12  
   13  # XXX Do not edit!
   14: # This file is automatically generated by mklabels.py
   15  
   16  LABELS = {

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/_vendor/webencodings/mklabels.py:
   38  
   39  # XXX Do not edit!
   40: # This file is automatically generated by mklabels.py
   41  
   42  LABELS = {

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/commands/__init__.py:
   63  
   64  def get_similar_commands(name):
   65:     """Command name auto-correct."""
   66      from difflib import get_close_matches
   67  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/commands/completion.py:
   14      COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \\
   15                     COMP_CWORD=$COMP_CWORD \\
   16:                    PIP_AUTO_COMPLETE=1 $1 ) )
   17  }
   18  complete -o default -F _pip_completion pip
   ..
   24    reply=( $( COMP_WORDS="$words[*]" \\
   25               COMP_CWORD=$(( cword-1 )) \\
   26:              PIP_AUTO_COMPLETE=1 $words[1] ) )
   27  }
   28  compctl -K _pip_completion pip
   ..
   31      set -lx COMP_WORDS (commandline -o) ""
   32      set -lx COMP_CWORD (math (contains -i -- (commandline -t) $COMP_WORDS)-1)
   33:     set -lx PIP_AUTO_COMPLETE 1
   34      string split \  -- (eval $COMP_WORDS[1])
   35  end

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/commands/install.py:
  333                          # Ignore the result: a failed wheel will be
  334                          # installed from the sdist/vcs whatever.
  335:                         wb.build(autobuilding=True)
  336  
  337                      if not options.download_dir:
  ...
  414                              logger.warning(
  415                                  'Target directory %s already exists and is '
  416:                                 'a link. Pip will not automatically replace '
  417                                  'links, please remove if replacement is '
  418                                  'desired.',

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/commands/uninstall.py:
   74                      '"pip help %(name)s")' % dict(name=self.name)
   75                  )
   76:             requirement_set.uninstall(auto_confirm=options.yes)
   77  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/download.py:
   30                         backup_dir, ask_path_exists, unpack_file,
   31                         ARCHIVE_EXTENSIONS, consume, call_subprocess)
   32: from pip.utils.encoding import auto_decode
   33  from pip.utils.filesystem import check_path_owner
   34  from pip.utils.logging import indent_log
   ..
  420      try:
  421          with open(url, 'rb') as f:
  422:             content = auto_decode(f.read())
  423      except IOError as exc:
  424          raise InstallationError(
  ...
  556                      #   Content-Encoding: gzip header
  557                      #
  558:                     # By setting this not to decode automatically we
  559                      # hope to eliminate problems with the second case.
  560                      decode_content=False):

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/exceptions.py:
  148              'actually had. Add lines like these to your requirements files to '
  149              'prevent tampering. (If you did not enable --require-hashes '
  150:             'manually, note that it turns on automatically when any package '
  151              'has a hash.)')
  152  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/req/req_install.py:
  592                  % (self.link, vc_type))
  593  
  594:     def uninstall(self, auto_confirm=False):
  595          """
  596          Uninstall the distribution currently satisfying this requirement.
  597  
  598          Prompts before removing or modifying files unless
  599:         ``auto_confirm`` is True.
  600  
  601          Refuses to delete or modify files outside of ``sys.prefix`` -
  ...
  752                          )
  753  
  754:         paths_to_remove.remove(auto_confirm)
  755          self.uninstalled = paths_to_remove
  756  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/req/req_set.py:
  340          raise KeyError("No project with the name %r" % project_name)
  341  
  342:     def uninstall(self, auto_confirm=False):
  343          for req in self.requirements.values():
  344              if req.constraint:
  345                  continue
  346:             req.uninstall(auto_confirm=auto_confirm)
  347              req.commit_uninstall()
  348  
  ...
  600                      download_dir = self.download_dir
  601                      # We always delete unpacked sdists after pip ran.
  602:                     autodelete_unpacked = True
  603                      if req_to_install.link.is_wheel \
  604                              and self.wheel_download_dir:
  ...
  610                              # When downloading, we only unpack wheels to get
  611                              # metadata.
  612:                             autodelete_unpacked = True
  613                          else:
  614                              # When installing a wheel, we use the unpacked
  615                              # wheel.
  616:                             autodelete_unpacked = False
  617                      unpack_url(
  618                          req_to_install.link, req_to_install.source_dir,
  619:                         download_dir, autodelete_unpacked,
  620                          session=self.session, hashes=hashes)
  621                  except requests.HTTPError as exc:
  ...
  776                      )
  777                      with indent_log():
  778:                         requirement.uninstall(auto_confirm=True)
  779                  try:
  780                      requirement.install(

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/req/req_uninstall.py:
   79              self.save_dir, os.path.splitdrive(path)[1].lstrip(os.path.sep))
   80  
   81:     def remove(self, auto_confirm=False):
   82          """Remove paths in ``self.paths`` with confirmation (unless
   83:         ``auto_confirm`` is True)."""
   84          if not self.paths:
   85              logger.info(
   ..
   96              paths = sorted(self.compact(self.paths))
   97  
   98:             if auto_confirm:
   99                  response = 'y'
  100              else:

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/utils/encoding.py:
   17  
   18  
   19: def auto_decode(data):
   20      """Check a bytes string for a BOM to correctly detect the encoding
   21  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pip/wheel.py:
  738              return False
  739  
  740:     def build(self, autobuilding=False):
  741          """Build wheels.
  742  
  ...
  745          :return: True if all the wheels built correctly.
  746          """
  747:         assert self._wheel_dir or (autobuilding and self._cache_root)
  748          # unpack sdists and constructs req set
  749          self.requirement_set.prepare_files(self.finder)
  ...
  756                  continue
  757              if req.is_wheel:
  758:                 if not autobuilding:
  759                      logger.info(
  760                          'Skipping %s, due to already being wheel.', req.name)
  761:             elif autobuilding and req.editable:
  762                  pass
  763:             elif autobuilding and req.link and not req.link.is_artifact:
  764                  pass
  765:             elif autobuilding and not req.source_dir:
  766                  pass
  767              else:
  768:                 if autobuilding:
  769                      link = req.link
  770                      base, ext = link.splitext()
  771                      if pip.index.egg_info_matches(base, None, link) is None:
  772:                         # Doesn't look like a package - don't autobuild a wheel
  773                          # because we'll have no way to lookup the result sanely
  774                          continue
  ...
  794              for req in buildset:
  795                  python_tag = None
  796:                 if autobuilding:
  797                      python_tag = pep425tags.implementation_tag
  798                      output_dir = _cache_for_link(self._cache_root, req.link)
  ...
  812                  if wheel_file:
  813                      build_success.append(req)
  814:                     if autobuilding:
  815                          # XXX: This is mildly duplicative with prepare_files,
  816                          # but not close enough to pull out to a single common

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pkg_resources/__init__.py:
  891          directories. The `full_env`, if supplied, should be an ``Environment``
  892          contains all currently-available distributions.  If `full_env` is not
  893:         supplied, one is created automatically from the ``WorkingSet`` this
  894          method is called on, which will typically mean that every directory on
  895          ``sys.path`` will be scanned for distributions.
  ...
 1352          generally only be called when the extraction path is a temporary
 1353          directory exclusive to a single process.  This method is not
 1354:         automatically called; you must call it explicitly or register it as an
 1355          ``atexit`` function if you wish to ensure cleanup of a temporary
 1356          directory used for extractions.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pymysql/connections.py:
  400      """A MysqlPacket that represents a specific column's metadata in the result.
  401  
  402:     Parsing is automatically done and the results are exported via public
  403      attributes on the class such as: db, table_name, name, length, type_code.
  404      """
  ...
  534                   connect_timeout=10, ssl=None, read_default_group=None,
  535                   compress=None, named_pipe=None, no_delay=None,
  536:                  autocommit=False, db=None, passwd=None, local_infile=False,
  537                   max_allowed_packet=16*1024*1024, defer_connect=False,
  538                   auth_plugin_map={}, read_timeout=None, write_timeout=None,
  ...
  573          compress; Not supported
  574          named_pipe: Not supported
  575:         autocommit: Autocommit mode. None means use server default. (default: False)
  576          local_infile: Boolean to enable the use of LOAD DATA LOCAL command. (default: False)
  577          max_allowed_packet: Max size of packet sent to server in bytes. (default: 16MB)
  ...
  689          self.host_info = "Not connected"
  690  
  691:         #: specified autocommit mode. None means use server default.
  692:         self.autocommit_mode = autocommit
  693  
  694          if conv is None:
  ...
  754      __del__ = _force_close
  755  
  756:     def autocommit(self, value):
  757:         self.autocommit_mode = bool(value)
  758:         current = self.get_autocommit()
  759          if value != current:
  760:             self._send_autocommit_mode()
  761  
  762:     def get_autocommit(self):
  763          return bool(self.server_status &
  764:                     SERVER_STATUS.SERVER_STATUS_AUTOCOMMIT)
  765  
  766      def _read_ok_packet(self):
  ...
  772          return ok
  773  
  774:     def _send_autocommit_mode(self):
  775          """Set whether or not to commit after every execute()"""
  776:         self._execute_command(COMMAND.COM_QUERY, "SET AUTOCOMMIT = %s" %
  777:                               self.escape(self.autocommit_mode))
  778          self._read_ok_packet()
  779  
  ...
  942                  self.commit()
  943  
  944:             if self.autocommit_mode is not None:
  945:                 self.autocommit(self.autocommit_mode)
  946          except BaseException as e:
  947              self._rfile = None

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pymysql/constants/ER.py:
   76  BLOB_USED_AS_KEY = 1073
   77  TOO_BIG_FIELDLENGTH = 1074
   78: WRONG_AUTO_KEY = 1075
   79  READY = 1076
   80  NORMAL_SHUTDOWN = 1077
   ..
  165  TOO_LONG_STRING = 1162
  166  TABLE_CANT_HANDLE_BLOB = 1163
  167: TABLE_CANT_HANDLE_AUTO_INCREMENT = 1164
  168  DELAYED_INSERT_TABLE_LOCKED = 1165
  169  WRONG_COLUMN_NAME = 1166
  ...
  247  CORRUPT_HELP_DB = 1244
  248  CYCLIC_REFERENCE = 1245
  249: AUTO_CONVERT = 1246
  250  ILLEGAL_REFERENCE = 1247
  251  DERIVED_MUST_HAVE_ALIAS = 1248
  ...
  294  DUPLICATED_VALUE_IN_TYPE = 1291
  295  TRUNCATED_WRONG_VALUE = 1292
  296: TOO_MUCH_AUTO_TIMESTAMP_COLS = 1293
  297  INVALID_ON_UPDATE = 1294
  298  UNSUPPORTED_PS = 1295
  ...
  405  XA_RBROLLBACK = 1402
  406  NONEXISTING_PROC_GRANT = 1403
  407: PROC_AUTO_GRANT_FAIL = 1404
  408: PROC_AUTO_REVOKE_FAIL = 1405
  409  DATA_TOO_LONG = 1406
  410  SP_BAD_SQLSTATE = 1407
  ...
  446  VIEW_PREVENT_UPDATE = 1443
  447  PS_NO_RECURSION = 1444
  448: SP_CANT_SET_AUTOCOMMIT = 1445
  449  MALFORMED_DEFINER = 1446
  450  VIEW_FRM_NO_USER = 1447

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pymysql/constants/FLAG.py:
    8  BINARY = 128
    9  ENUM = 256
   10: AUTO_INCREMENT = 512
   11  TIMESTAMP = 1024
   12  SET = 2048

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pymysql/constants/SERVER_STATUS.py:
    1  
    2  SERVER_STATUS_IN_TRANS = 1
    3: SERVER_STATUS_AUTOCOMMIT = 2
    4  SERVER_MORE_RESULTS_EXISTS = 8
    5  SERVER_QUERY_NO_GOOD_INDEX_USED = 16

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pymysql/tests/test_connection.py:
  381          assert cur.fetchone()[0] == t
  382  
  383:     def test_autocommit(self):
  384          con = self.connections[0]
  385:         self.assertFalse(con.get_autocommit())
  386  
  387          cur = con.cursor()
  388:         cur.execute("SET AUTOCOMMIT=1")
  389:         self.assertTrue(con.get_autocommit())
  390  
  391:         con.autocommit(False)
  392:         self.assertFalse(con.get_autocommit())
  393:         cur.execute("SELECT @@AUTOCOMMIT")
  394          self.assertEqual(cur.fetchone()[0], 0)
  395  
  ...
  510  
  511          self.assertEqual(con.escape("foo'bar"), "'foo\\'bar'")
  512:         # added NO_AUTO_CREATE_USER as not including it in 5.7 generates warnings
  513:         cur.execute("SET sql_mode='NO_BACKSLASH_ESCAPES,NO_AUTO_CREATE_USER'")
  514          self.assertEqual(con.escape("foo'bar"), "'foo''bar'")
  515  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pymysql/tests/test_issues.py:
  286                  warnings.filterwarnings("ignore")
  287                  c.execute("drop table if exists issue66")
  288:             c.execute("create table issue66 (id integer primary key auto_increment, x integer)")
  289              c.execute("insert into issue66 (x) values (1)")
  290              c.execute("insert into issue66 (x) values (1)")
  ...
  341  
  342      def test_issue_114(self):
  343:         """ autocommit is not set after reconnecting with ping() """
  344          conn = pymysql.connect(charset="utf8", **self.databases[0])
  345:         conn.autocommit(False)
  346          c = conn.cursor()
  347:         c.execute("""select @@autocommit;""")
  348          self.assertFalse(c.fetchone()[0])
  349          conn.close()
  350          conn.ping()
  351:         c.execute("""select @@autocommit;""")
  352          self.assertFalse(c.fetchone()[0])
  353          conn.close()
  354  
  355:         # Ensure autocommit() is still working
  356          conn = pymysql.connect(charset="utf8", **self.databases[0])
  357          c = conn.cursor()
  358:         c.execute("""select @@autocommit;""")
  359          self.assertFalse(c.fetchone()[0])
  360          conn.close()
  361          conn.ping()
  362:         conn.autocommit(True)
  363:         c.execute("""select @@autocommit;""")
  364          self.assertTrue(c.fetchone()[0])
  365          conn.close()

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/pyparsing.py:
   34  Here is a program to parse "Hello, World!" (or any greeting of the form 
   35  C{"<salutation>, <addressee>!"}), built up using L{Word}, L{Literal}, and L{And} elements 
   36: (L{'+'<ParserElement.__add__>} operator gives L{And} expressions, strings are auto-converted to
   37  L{Literal} expressions)::
   38  
   ..
 4292          print(OneOrMore(attr_expr).parseString(text).dump())
 4293          
 4294:         # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
 4295          result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
 4296          print(result.dump())

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests-2.11.1.dist-info/DESCRIPTION.rst:
   33  need for manual labor. There's no need to manually add query strings to your
   34  URLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling
   35: are 100% automatic, powered by `urllib3 <https://github.com/shazow/urllib3>`_,
   36  which is embedded within Requests.
   37  
   ..
   51  - Basic/Digest Authentication
   52  - Elegant Key/Value Cookies
   53: - Automatic Decompression
   54: - Automatic Content Decoding
   55  - Unicode Response Bodies
   56  - Multipart File Uploads
   ..
  447  - Unicode URL improvements for Python 2.
  448  - Re-order JSON param for backwards compat.
  449: - Automatically defrag authentication schemes from host/pass URIs. (`#2249 <https://github.com/kennethreitz/requests/issues/2249>`_)
  450  
  451  
  ...
  485  **Behavioral Changes**
  486  
  487: - ``Connection: keep-alive`` header is now sent automatically.
  488  
  489  **Improvements**
  ...
  517  - Authorization is re-evaluated each redirect.
  518  - On redirect, pass url as native strings.
  519: - Fall-back to autodetected encoding for JSON when Unicode detection fails.
  520  - Headers set to ``None`` on the ``Session`` are now correctly not sent.
  521  - Correctly honor ``decode_unicode`` even if it wasn't used earlier in the same
  ...
  577  ++++++++++++++++++
  578  
  579: - Updated included CA Bundle with new mistrusts and automated process for the future
  580  - Added MD5-sess to Digest Auth
  581  - Accept per-file headers in multipart file POST messages.
  ...
  772  - Ensure proxy exclusions work properly.
  773  - Clearer UnicodeError exceptions.
  774: - Automatic casting of URLs to strings (fURL and such)
  775  - Bugfixes.
  776  
  ...
  969  ++++++++++++++++++
  970  
  971: * danger_mode for automatic Response.raise_for_status()
  972  * Response.iter_lines refactor
  973  
  ...
 1114  ++++++++++++++++++
 1115  
 1116: * Automatic decoding of unicode, based on HTTP Headers.
 1117  * New ``decode_unicode`` setting.
 1118  * Removal of ``r.read/close`` methods.
 1119  * New ``r.faw`` interface for advanced response usage.*
 1120: * Automatic expansion of parameterized headers.
 1121  
 1122  
 ....
 1222  ++++++++++++++++++
 1223  
 1224: * Automatic Decompression of GZip Encoded Content
 1225: * AutoAuth Support for Tupled HTTP Auth
 1226  
 1227  
 ....
 1237  ++++++++++++++++++
 1238  
 1239: * Automatic Authentication API Change
 1240  * Smarter Query URL Parameterization
 1241  * Allow file uploads and POST data together
 ....
 1251  * Python 2.5 Support
 1252  * PyPy-c v1.4 Support
 1253: * Auto-Authentication tests
 1254  * Improved Request object constructor
 1255  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests-2.11.1.dist-info/METADATA:
   62  need for manual labor. There's no need to manually add query strings to your
   63  URLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling
   64: are 100% automatic, powered by `urllib3 <https://github.com/shazow/urllib3>`_,
   65  which is embedded within Requests.
   66  
   ..
   80  - Basic/Digest Authentication
   81  - Elegant Key/Value Cookies
   82: - Automatic Decompression
   83: - Automatic Content Decoding
   84  - Unicode Response Bodies
   85  - Multipart File Uploads
   ..
  476  - Unicode URL improvements for Python 2.
  477  - Re-order JSON param for backwards compat.
  478: - Automatically defrag authentication schemes from host/pass URIs. (`#2249 <https://github.com/kennethreitz/requests/issues/2249>`_)
  479  
  480  
  ...
  514  **Behavioral Changes**
  515  
  516: - ``Connection: keep-alive`` header is now sent automatically.
  517  
  518  **Improvements**
  ...
  546  - Authorization is re-evaluated each redirect.
  547  - On redirect, pass url as native strings.
  548: - Fall-back to autodetected encoding for JSON when Unicode detection fails.
  549  - Headers set to ``None`` on the ``Session`` are now correctly not sent.
  550  - Correctly honor ``decode_unicode`` even if it wasn't used earlier in the same
  ...
  606  ++++++++++++++++++
  607  
  608: - Updated included CA Bundle with new mistrusts and automated process for the future
  609  - Added MD5-sess to Digest Auth
  610  - Accept per-file headers in multipart file POST messages.
  ...
  801  - Ensure proxy exclusions work properly.
  802  - Clearer UnicodeError exceptions.
  803: - Automatic casting of URLs to strings (fURL and such)
  804  - Bugfixes.
  805  
  ...
  998  ++++++++++++++++++
  999  
 1000: * danger_mode for automatic Response.raise_for_status()
 1001  * Response.iter_lines refactor
 1002  
 ....
 1143  ++++++++++++++++++
 1144  
 1145: * Automatic decoding of unicode, based on HTTP Headers.
 1146  * New ``decode_unicode`` setting.
 1147  * Removal of ``r.read/close`` methods.
 1148  * New ``r.faw`` interface for advanced response usage.*
 1149: * Automatic expansion of parameterized headers.
 1150  
 1151  
 ....
 1251  ++++++++++++++++++
 1252  
 1253: * Automatic Decompression of GZip Encoded Content
 1254: * AutoAuth Support for Tupled HTTP Auth
 1255  
 1256  
 ....
 1266  ++++++++++++++++++
 1267  
 1268: * Automatic Authentication API Change
 1269  * Smarter Query URL Parameterization
 1270  * Allow file uploads and POST data together
 ....
 1280  * Python 2.5 Support
 1281  * PyPy-c v1.4 Support
 1282: * Auto-Authentication tests
 1283  * Improved Request object constructor
 1284  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/cacert.pem:
 2854  -----END CERTIFICATE-----
 2855  
 2856: # Issuer: CN=Autoridad de Certificacion Firmaprofesional CIF A62634068
 2857: # Subject: CN=Autoridad de Certificacion Firmaprofesional CIF A62634068
 2858: # Label: "Autoridad de Certificacion Firmaprofesional CIF A62634068"
 2859  # Serial: 6047274297262753887
 2860  # MD5 Fingerprint: 73:3a:74:7a:ec:bb:a3:96:a6:c2:e4:e2:c8:9b:c0:c3
 ....
 3278  -----END CERTIFICATE-----
 3279  
 3280: # Issuer: CN=Certinomis - Autorité Racine O=Certinomis OU=0002 433998903
 3281: # Subject: CN=Certinomis - Autorité Racine O=Certinomis OU=0002 433998903
 3282: # Label: "Certinomis - Autorité Racine"
 3283  # Serial: 1
 3284  # MD5 Fingerprint: 7f:30:78:8c:03:e3:ca:c9:0a:e2:c9:ea:1e:aa:55:1a
 ....
 3885  -----END CERTIFICATE-----
 3886  
 3887: # Issuer: CN=Autoridad de Certificacion Raiz del Estado Venezolano O=Sistema Nacional de Certificacion Electronica OU=Superintendencia de Servicios de Certificacion Electronica
 3888  # Subject: CN=PSCProcert O=Sistema Nacional de Certificacion Electronica OU=Proveedor de Certificados PROCERT
 3889  # Label: "PSCProcert"

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/models.py:
   36  from .status_codes import codes
   37  
   38: #: The set of HTTP status codes that indicate an automatically
   39  #: processable redirect.
   40  REDIRECT_STATI = (
   ..
  639      def is_redirect(self):
  640          """True if this Response is a well-formed HTTP redirect that could have
  641:         been processed automatically (by :meth:`Session.resolve_redirects`).
  642          """
  643          return ('location' in self.headers and self.status_code in REDIRECT_STATI)
  ...
  783              return str('')
  784  
  785:         # Fallback to auto-detected encoding.
  786          if self.encoding is None:
  787              encoding = self.apparent_encoding

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/packages/chardet/hebrewprober.py:
  215          # that case is not an indication for either Logical or Visual text.
  216          #
  217:         # We automatically filter out all 7-bit characters (replace them with
  218          # spaces) so the word boundary detection works properly. [MAP]
  219  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/packages/urllib3/connection.py:
  162              self._tunnel()
  163              # Mark this connection as not reusable
  164:             self.auto_open = 0
  165  
  166      def connect(self):
  ...
  267              self._tunnel()
  268              # Mark this connection as not reusable
  269:             self.auto_open = 0
  270  
  271              # Override the host with the one we're requesting data from.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/packages/urllib3/connectionpool.py:
  249              log.info("Resetting dropped connection: %s", self.host)
  250              conn.close()
  251:             if getattr(conn, 'auto_open', 1) == 0:
  252                  # This is a proxied connection that has been mutated by
  253                  # httplib._tunnel() and cannot be reused (since it would
  ...
  499  
  500          :param redirect:
  501:             If True, automatically handle redirects (status codes 301, 302,
  502              303, 307, 308). Each redirect counts as a retry. Disabling retries
  503              will disable redirect, too.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/packages/urllib3/contrib/appengine.py:
  158  
  159          if is_prod_appengine():
  160:             # Production GAE handles deflate encoding automatically, but does
  161              # not remove the encoding header.
  162              content_encoding = urlfetch_resp.headers.get('content-encoding')

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/packages/urllib3/contrib/socks.py:
  119  # urllib3/connection.py here because the HTTPSConnection will already have been
  120  # correctly set to either the Verified or Unverified form by that module. This
  121: # means the SOCKSHTTPSConnection will automatically be the correct type.
  122  class SOCKSHTTPSConnection(SOCKSConnection, HTTPSConnection):
  123      pass

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/packages/urllib3/exceptions.py:
   46  
   47  class DecodeError(HTTPError):
   48:     "Raised when automatic decoding based on Content-Type fails."
   49      pass
   50  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/requests/utils.py:
  211      the list may include quoted-strings.  A quoted-string could
  212      contain a comma.  A non-quoted string could have quotes in the
  213:     middle.  Quotes are removed automatically after parsing.
  214  
  215      It basically works like :func:`parse_set_header` just that items

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium-3.3.3.dist-info/DESCRIPTION.rst:
    8  Python language bindings for Selenium WebDriver.
    9  
   10: The `selenium` package is used to automate web browser interaction from Python.
   11  
   12  +-----------+--------------------------------------------------------------------------------------+

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium-3.3.3.dist-info/METADATA:
   33  Python language bindings for Selenium WebDriver.
   34  
   35: The `selenium` package is used to automate web browser interaction from Python.
   36  
   37  +-----------+--------------------------------------------------------------------------------------+

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium/webdriver/common/action_chains.py:
   27  class ActionChains(object):
   28      """
   29:     ActionChains are a way to automate low level interactions such as
   30      mouse movements, mouse button actions, key press, and context menu interactions.
   31      This is useful for doing more complex actions like hover over and drag and drop.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium/webdriver/common/proxy.py:
   42      DIRECT = ProxyTypeFactory.make(0, 'DIRECT')  # Direct connection, no proxy (default on Windows).
   43      MANUAL = ProxyTypeFactory.make(1, 'MANUAL')  # Manual proxy settings (e.g., for httpProxy).
   44:     PAC = ProxyTypeFactory.make(2, 'PAC')  # Proxy autoconfiguration from URL.
   45      RESERVED_1 = ProxyTypeFactory.make(3, 'RESERVED1')  # Never used.
   46:     AUTODETECT = ProxyTypeFactory.make(4, 'AUTODETECT')  # Proxy autodetection (presumably with WPAD).
   47      SYSTEM = ProxyTypeFactory.make(5, 'SYSTEM')  # Use system settings (default on Linux).
   48      UNSPECIFIED = ProxyTypeFactory.make(6, 'UNSPECIFIED')  # Not initialized (for internal use).
   ..
   69  
   70      proxyType = ProxyType.UNSPECIFIED
   71:     autodetect = False
   72      ftpProxy = ''
   73      httpProxy = ''
   74      noProxy = ''
   75:     proxyAutoconfigUrl = ''
   76      sslProxy = ''
   77      socksProxy = ''
   ..
   95              if 'noProxy' in raw and raw['noProxy'] is not None:
   96                  self.no_proxy = raw['noProxy']
   97:             if 'proxyAutoconfigUrl' in raw and raw['proxyAutoconfigUrl'] is not None:
   98:                 self.proxy_autoconfig_url = raw['proxyAutoconfigUrl']
   99              if 'sslProxy' in raw and raw['sslProxy'] is not None:
  100                  self.sslProxy = raw['sslProxy']
  101:             if 'autodetect' in raw and raw['autodetect'] is not None:
  102:                 self.auto_detect = raw['autodetect']
  103              if 'socksProxy' in raw and raw['socksProxy'] is not None:
  104                  self.socks_proxy = raw['socksProxy']
  ...
  127  
  128      @property
  129:     def auto_detect(self):
  130          """
  131:         Returns autodetect setting.
  132          """
  133:         return self.autodetect
  134  
  135:     @auto_detect.setter
  136:     def auto_detect(self, value):
  137          """
  138:         Sets autodetect setting.
  139  
  140          :Args:
  141:          - value: The autodetect value.
  142          """
  143          if isinstance(value, bool):
  144:             if self.autodetect is not value:
  145:                 self._verify_proxy_type_compatibility(ProxyType.AUTODETECT)
  146:                 self.proxyType = ProxyType.AUTODETECT
  147:                 self.autodetect = value
  148          else:
  149:             raise ValueError("Autodetect proxy value needs to be a boolean")
  150  
  151      @property
  ...
  207  
  208      @property
  209:     def proxy_autoconfig_url(self):
  210          """
  211:         Returns proxy autoconfig url setting.
  212          """
  213:         return self.proxyAutoconfigUrl
  214  
  215:     @proxy_autoconfig_url.setter
  216:     def proxy_autoconfig_url(self, value):
  217          """
  218:         Sets proxy autoconfig url setting.
  219  
  220          :Args:
  221:          - value: The proxy autoconfig url value.
  222          """
  223          self._verify_proxy_type_compatibility(ProxyType.PAC)
  224          self.proxyType = ProxyType.PAC
  225:         self.proxyAutoconfigUrl = value
  226  
  227      @property
  ...
  314          proxy_caps = {}
  315          proxy_caps['proxyType'] = self.proxyType['string']
  316:         if self.autodetect:
  317:             proxy_caps['autodetect'] = self.autodetect
  318          if self.ftpProxy:
  319              proxy_caps['ftpProxy'] = self.ftpProxy
  320          if self.httpProxy:
  321              proxy_caps['httpProxy'] = self.httpProxy
  322:         if self.proxyAutoconfigUrl:
  323:             proxy_caps['proxyAutoconfigUrl'] = self.proxyAutoconfigUrl
  324          if self.sslProxy:
  325              proxy_caps['sslProxy'] = self.sslProxy

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium/webdriver/firefox/firefox_profile.py:
  198              self._set_manual_proxy_preference("socks", proxy.socks_proxy)
  199          elif proxy.proxy_type is ProxyType.PAC:
  200:             self.set_preference("network.proxy.autoconfig_url", proxy.proxy_autoconfig_url)
  201  
  202      def _set_manual_proxy_preference(self, key, setting):

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium/webdriver/firefox/webdriver_prefs.json:
    1  {
    2    "frozen": {
    3:     "app.update.auto": false,
    4      "app.update.enabled": false,
    5      "browser.displayedE10SNotice": 4,
    .
   27      "devtools.errorconsole.enabled": true,
   28      "dom.disable_open_during_load": false,
   29:     "extensions.autoDisableScopes": 10,
   30      "extensions.blocklist.enabled": false,
   31      "extensions.checkCompatibility.nightly": false,

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium/webdriver/remote/getAttribute.js:
    8  var sa=Q,ua=E&&!(8<=Number(L)),va=E&&!(9<=Number(L));M&&P(2.3);M&&P(4);N&&P(6);function R(a,c){c=c.toLowerCase();if("style"==c)return wa(a.style.cssText);if(ua&&"value"==c&&T(a,"INPUT"))return a.value;if(va&&!0===a[c])return String(a.getAttribute(c));var b=a.getAttributeNode(c);return b&&b.specified?b.value:null}var xa=/[;]+(?=(?:(?:[^"]*"){2})*[^"]*$)(?=(?:(?:[^']*'){2})*[^']*$)(?=(?:[^()]*\([^()]*\))*[^()]*$)/;
    9  function wa(a){var c=[];ca(a.split(xa),function(a){var d=a.indexOf(":");0<d&&(a=[a.slice(0,d),a.slice(d+1)],2==a.length&&c.push(a[0].toLowerCase(),":",a[1],";"))});c=c.join("");return c=";"==c.charAt(c.length-1)?c:c+";"}function U(a,c){var b;ua&&"value"==c&&T(a,"OPTION")&&null===R(a,"value")?(b=[],oa(a,b,!1),b=b.join("")):b=a[c];return b}function T(a,c){return!!a&&1==a.nodeType&&(!c||a.tagName.toUpperCase()==c)}
   10: function ya(a){return T(a,"OPTION")?!0:T(a,"INPUT")?(a=a.type.toLowerCase(),"checkbox"==a||"radio"==a):!1};var za={"class":"className",readonly:"readOnly"},V="async autofocus autoplay checked compact complete controls declare defaultchecked defaultselected defer disabled draggable ended formnovalidate hidden indeterminate iscontenteditable ismap itemscope loop multiple muted nohref noresize noshade novalidate nowrap open paused pubdate readonly required reversed scoped seamless seeking selected spellcheck truespeed willvalidate".split(" ");function Aa(a,c){var b=null,d=c.toLowerCase();if("style"==d)return(b=a.style)&&!l(b)&&(b=b.cssText),b;if(("selected"==d||"checked"==d)&&ya(a)){if(!ya(a))throw new m(15,"Element is not selectable");var b="selected",f=a.type&&a.type.toLowerCase();if("checkbox"==f||"radio"==f)b="checked";return U(a,b)?"true":null}var h=T(a,"A");if(T(a,"IMG")&&"src"==d||h&&"href"==d)return(b=R(a,d))&&(b=U(a,d)),b;if("spellcheck"==d){b=R(a,d);if(null!==b){if("false"==b.toLowerCase())return"false";if("true"==b.toLowerCase())return"true"}return U(a,
   11  d)+""}h=za[c]||c;a:if(l(V))d=l(d)&&1==d.length?V.indexOf(d,0):-1;else{for(var k=0;k<V.length;k++)if(k in V&&V[k]===d){d=k;break a}d=-1}if(0<=d)return(b=null!==R(a,c)||U(a,h))?"true":null;try{f=U(a,h)}catch(S){}(d=null==f)||(d=typeof f,d="object"==d&&null!=f||"function"==d);d?b=R(a,c):b=f;return null!=b?b.toString():null}var W=["_"],X=g;W[0]in X||!X.execScript||X.execScript("var "+W[0]);for(var Y;W.length&&(Y=W.shift());){var Z;if(Z=!W.length)Z=void 0!==Aa;Z?X[Y]=Aa:X[Y]?X=X[Y]:X=X[Y]={}};; return this._.apply(null,arguments);}.apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);}
   12  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/selenium/webdriver/remote/isDisplayed.js:
   98  function Mc(a,b,c){function d(a){var b=Nc(a);return 0<b.height&&0<b.width?!0:M(a,"PATH")&&(0<b.height||0<b.width)?(a=Y(a,"stroke-width"),!!a&&0<parseInt(a,10)):"hidden"!=Y(a,"overflow")&&Ha(a.childNodes,function(a){return 3==a.nodeType||M(a)&&d(a)})}function e(a){return Oc(a)==Z&&Ia(a.childNodes,function(a){return!M(a)||e(a)||!d(a)})}if(!M(a))throw Error("Argument to isShown must be of type Element");if(M(a,"BODY"))return!0;if(M(a,"OPTION")||M(a,"OPTGROUP"))return a=qb(a,function(a){return M(a,"SELECT")}),
   99  !!a&&Mc(a,!0,c);var f=Pc(a);if(f)return!!f.w&&0<f.rect.width&&0<f.rect.height&&Mc(f.w,b,c);if(M(a,"INPUT")&&"hidden"==a.type.toLowerCase()||M(a,"NOSCRIPT"))return!1;f=Y(a,"visibility");return"collapse"!=f&&"hidden"!=f&&c(a)&&(b||Qc(a))&&d(a)?!e(a):!1}var Z="hidden";
  100: function Oc(a){function b(a){function b(a){return a==g?!0:!Y(a,"display").lastIndexOf("inline",0)||"absolute"==c&&"static"==Y(a,"position")?!1:!0}var c=Y(a,"position");if("fixed"==c)return w=!0,a==g?null:g;for(a=Kc(a);a&&!b(a);)a=Kc(a);return a}function c(a){var b=a;if("visible"==p)if(a==g&&h)b=h;else if(a==h)return{x:"visible",y:"visible"};b={x:Y(b,"overflow-x"),y:Y(b,"overflow-y")};a==g&&(b.x="visible"==b.x?"auto":b.x,b.y="visible"==b.y?"auto":b.y);return b}function d(a){if(a==g){var b=(new rb(f)).a;
  101  a=b.scrollingElement?b.scrollingElement:Xa||"CSS1Compat"!=b.compatMode?b.body||b.documentElement:b.documentElement;b=b.parentWindow||b.defaultView;a=E&&bb("10")&&b.pageYOffset!=a.scrollTop?new D(a.scrollLeft,a.scrollTop):new D(b.pageXOffset||a.scrollLeft,b.pageYOffset||a.scrollTop)}else a=new D(a.scrollLeft,a.scrollTop);return a}var e=Rc(a),f=G(a),g=f.documentElement,h=f.body,p=Y(g,"overflow"),w;for(a=b(a);a;a=b(a)){var m=c(a);if("visible"!=m.x||"visible"!=m.y){var u=Nc(a);if(!u.width||!u.height)return Z;
  102  var y=e.right<u.left,Q=e.bottom<u.top;if(y&&"hidden"==m.x||Q&&"hidden"==m.y)return Z;if(y&&"visible"!=m.x||Q&&"visible"!=m.y){y=d(a);Q=e.bottom<u.top-y.y;if(e.right<u.left-y.x&&"visible"!=m.x||Q&&"visible"!=m.x)return Z;e=Oc(a);return e==Z?Z:"scroll"}y=e.left>=u.left+u.width;u=e.top>=u.top+u.height;if(y&&"hidden"==m.x||u&&"hidden"==m.y)return Z;if(y&&"visible"!=m.x||u&&"visible"!=m.y){if(w&&(m=d(a),e.left>=g.scrollWidth-m.x||e.right>=g.scrollHeight-m.y))return Z;e=Oc(a);return e==Z?Z:"scroll"}}}return"none"}

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/setuptools/command/build_clib.py:
   54  
   55              # Build the list to be used by newer_pairwise_group
   56:             # each source will be auto-added to its dependencies.
   57              for source in sources:
   58                  src_deps = [source]

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/setuptools/command/easy_install.py:
    4  ------------
    5  
    6: A tool for doing automatic download/extract/build of distutils-based Python
    7  packages.  For detailed documentation, see the accompanying EasyInstall.txt
    8  file, or visit the `EasyInstall home page`__.
    .
 1675  
 1676  
 1677: def auto_chmod(func, arg, exc):
 1678      if func in [os.unlink, os.remove] and os.name == 'nt':
 1679          chmod(arg, stat.S_IWRITE)
 ....
 1836  # stale zipimport.zipimporter instances laying around, attempting to use them
 1837  # will fail due to not having its zip archive directory information available
 1838: # instead of being automatically corrected to use the new correct zip archive
 1839  # directory information.
 1840  if '__pypy__' in sys.builtin_module_names:
 ....
 2229  
 2230  
 2231: def rmtree(path, ignore_errors=False, onerror=auto_chmod):
 2232      return shutil.rmtree(path, ignore_errors, onerror)
 2233  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/setuptools/command/sdist.py:
  136              # will in fact create an infinite recursion if include_package_data
  137              # is True.  Use of include_package_data will imply that
  138:             # distutils-style automatic handling of package_data is disabled
  139              if not self.distribution.include_package_data:
  140                  for _, src_dir, _, filenames in build_py.data_files:

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/setuptools/dist.py:
  225          versions that the distribution requires when installed, in the format
  226          used by 'pkg_resources.require()'.  They will be installed
  227:         automatically when the package is installed.  If you wish to use
  228          packages that are not available in PyPI, or want to give your users an
  229          alternate download location, you can add a 'find_links' option to the
  ...
  273          location as the package.  Note that globs are allowed to reference
  274          the contents of non-package subdirectories, as long as you use '/' as
  275:         a path separator.  (Globs are automatically converted to
  276          platform-specific paths at runtime.)
  277  
  ...
  797        'optional' -- if true, the feature's inclusion can be controlled from the
  798           command line, using the '--with-X' or '--without-X' options.  If
  799:          false, the feature's inclusion status is determined automatically,
  800           based on 'availabile', 'standard', and whether any other feature
  801           requires it.  The default setting is 'True'.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/setuptools/msvc.py:
  757          Target architecture.
  758      vc_ver: float
  759:         Required Microsoft Visual C++ version. If not set, autodetect the last
  760          version.
  761      vc_min_ver: float

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/setuptools/package_index.py:
  550          of a .py file with an unambiguous ``#egg=name-version`` tag (i.e., one
  551          that escapes ``-`` as ``_`` throughout), a trivial ``setup.py`` is
  552:         automatically created alongside the downloaded file.
  553  
  554          If `spec` is a ``Requirement`` object or a string containing a
  ...
  697              raise DistutilsError(
  698                  "Can't process plain .py files without an '#egg=name-version'"
  699:                 " suffix to enable automatic setup script generation."
  700              )
  701  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/Werkzeug-0.12.1.dist-info/DESCRIPTION.rst:
   35  
   36  -   A simple WSGI server with support for threading and forking
   37:     with an automatic reloader.
   38  
   39  -   a flexible URL routing system with REST support.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/Werkzeug-0.12.1.dist-info/METADATA:
   64  
   65  -   A simple WSGI server with support for threading and forking
   66:     with an automatic reloader.
   67  
   68  -   a flexible URL routing system with REST support.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/__init__.py:
  110  class module(ModuleType):
  111  
  112:     """Automatically import objects from the modules."""
  113  
  114      def __getattr__(self, name):

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/_reloader.py:
  245      __import__('watchdog.observers')
  246  except ImportError:
  247:     reloader_loops['auto'] = reloader_loops['stat']
  248  else:
  249:     reloader_loops['auto'] = reloader_loops['watchdog']
  250  
  251  
  252  def run_with_reloader(main_func, extra_files=None, interval=1,
  253:                       reloader_type='auto'):
  254      """Run the given function in an independent python interpreter."""
  255      import signal

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/contrib/securecookie.py:
  206          """Serialize the secure cookie into a string.
  207  
  208:         If expires is provided, the session will be automatically invalidated
  209          after expiration when you unseralize it. This provides better
  210          protection against session cookie theft.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/contrib/sessions.py:
  302  
  303      """A simple middleware that puts the session object of a store provided
  304:     into the WSGI environ.  It automatically sets cookies and restores
  305      sessions.
  306  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/contrib/wrappers.py:
  243      a dynamic `charset` attribute.  This means that if the charset is
  244      looked up and stored in the `Content-Type` header and updates
  245:     itself automatically.  This also means a small performance hit but
  246      can be useful if you're working with different charsets on
  247      responses.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/datastructures.py:
  931         This data structure now stores unicode values similar to how the
  932         multi dicts do it.  The main difference is that bytes can be set as
  933:        well which will automatically be latin1 decoded.
  934  
  935      .. versionchanged:: 0.9
  ...
 1602  
 1603      """An :class:`Accept` object is just a list subclass for lists of
 1604:     ``(value, quality)`` tuples.  It is automatically sorted by quality.
 1605  
 1606      All :class:`Accept` objects work similar to a list but provide extra

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/debug/shared/debugger.js:
  183      appendTo(consoleNode);
  184  
  185:   var command = $('<input type="text" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">')
  186      .appendTo(form)
  187      .keydown(function(e) {

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/debug/shared/jquery.js:
    1  /*! jQuery v1.11.3 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
    2: !function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.3",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b="length"in a&&a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;
    3  
    4: return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function aa(){return!0}function ba(){return!1}function ca(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ca()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ca()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?aa:ba):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=aa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=aa,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=aa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=ba;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=ba),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function da(a){var b=ea.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var ea="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fa=/ jQuery\d+="(?:null|\d+)"/g,ga=new RegExp("<(?:"+ea+")[\\s/>]","i"),ha=/^\s+/,ia=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ja=/<([\w:]+)/,ka=/<tbody/i,la=/<|&#?\w+;/,ma=/<(?:script|style|link)/i,na=/checked\s*(?:[^=]|=\s*.checked.)/i,oa=/^$|\/(?:java|ecma)script/i,pa=/^true\/(.*)/,qa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ra={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sa=da(y),ta=sa.appendChild(y.createElement("div"));ra.optgroup=ra.option,ra.tbody=ra.tfoot=ra.colgroup=ra.caption=ra.thead,ra.th=ra.td;function ua(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ua(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function va(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wa(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xa(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function ya(a){var b=pa.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function za(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Aa(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Ba(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xa(b).text=a.text,ya(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!ga.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ta.innerHTML=a.outerHTML,ta.removeChild(f=ta.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ua(f),h=ua(a),g=0;null!=(e=h[g]);++g)d[g]&&Ba(e,d[g]);if(b)if(c)for(h=h||ua(a),d=d||ua(f),g=0;null!=(e=h[g]);g++)Aa(e,d[g]);else Aa(a,f);return d=ua(f,"script"),d.length>0&&za(d,!i&&ua(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=da(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(la.test(f)){h=h||o.appendChild(b.createElement("div")),i=(ja.exec(f)||["",""])[1].toLowerCase(),l=ra[i]||ra._default,h.innerHTML=l[1]+f.replace(ia,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&ha.test(f)&&p.push(b.createTextNode(ha.exec(f)[0])),!k.tbody){f="table"!==i||ka.test(f)?"<table>"!==l[1]||ka.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ua(p,"input"),va),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ua(o.appendChild(f),"script"),g&&za(h),c)){e=0;while(f=h[e++])oa.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wa(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ua(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&za(ua(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ua(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fa,""):void 0;if(!("string"!=typeof a||ma.test(a)||!k.htmlSerialize&&ga.test(a)||!k.leadingWhitespace&&ha.test(a)||ra[(ja.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ia,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ua(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ua(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&na.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ua(i,"script"),xa),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ua(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,ya),j=0;f>j;j++)d=g[j],oa.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qa,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Ca,Da={};function Ea(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fa(a){var b=y,c=Da[a];return c||(c=Ea(a,b),"none"!==c&&c||(Ca=(Ca||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ca[0].contentWindow||Ca[0].contentDocument).document,b.write(),b.close(),c=Ea(a,b),Ca.detach()),Da[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Ga=/^margin/,Ha=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ia,Ja,Ka=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ia=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)},Ja=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ia(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Ha.test(g)&&Ga.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ia=function(a){return a.currentStyle},Ja=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ia(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ha.test(g)&&!Ka.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function La(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight),b.removeChild(i)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Ma=/alpha\([^)]*\)/i,Na=/opacity\s*=\s*([^)]*)/,Oa=/^(none|table(?!-c[ea]).+)/,Pa=new RegExp("^("+S+")(.*)$","i"),Qa=new RegExp("^([+-])=("+S+")","i"),Ra={position:"absolute",visibility:"hidden",display:"block"},Sa={letterSpacing:"0",fontWeight:"400"},Ta=["Webkit","O","Moz","ms"];function Ua(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ta.length;while(e--)if(b=Ta[e]+c,b in a)return b;return d}function Va(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fa(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wa(a,b,c){var d=Pa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Ya(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ia(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Ja(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ha.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xa(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Ja(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ua(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qa.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ua(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Ja(a,b,d)),"normal"===f&&b in Sa&&(f=Sa[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Oa.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Ra,function(){return Ya(a,b,d)}):Ya(a,b,d):void 0},set:function(a,c,d){var e=d&&Ia(a);return Wa(a,c,d?Xa(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Na.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Ma,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Ma.test(f)?f.replace(Ma,e):f+" "+e)}}),m.cssHooks.marginRight=La(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Ja,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Ga.test(a)||(m.cssHooks[a+b].set=Wa)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ia(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Va(this,!0)},hide:function(){return Va(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Za(a,b,c,d,e){
    5: return new Za.prototype.init(a,b,c,d,e)}m.Tween=Za,Za.prototype={constructor:Za,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")},cur:function(){var a=Za.propHooks[this.prop];return a&&a.get?a.get(this):Za.propHooks._default.get(this)},run:function(a){var b,c=Za.propHooks[this.prop];return this.options.duration?this.pos=b=m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Za.propHooks._default.set(this),this}},Za.prototype.init.prototype=Za.prototype,Za.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Za.propHooks.scrollTop=Za.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Za.prototype.init,m.fx.step={};var $a,_a,ab=/^(?:toggle|show|hide)$/,bb=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cb=/queueHooks$/,db=[ib],eb={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bb.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bb.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fb(){return setTimeout(function(){$a=void 0}),$a=m.now()}function gb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hb(a,b,c){for(var d,e=(eb[b]||[]).concat(eb["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ib(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fa(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fa(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ab.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fa(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hb(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jb(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kb(a,b,c){var d,e,f=0,g=db.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$a||fb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$a||fb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jb(k,j.opts.specialEasing);g>f;f++)if(d=db[f].call(j,a,k,j.opts))return d;return m.map(k,hb,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kb,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],eb[c]=eb[c]||[],eb[c].unshift(b)},prefilter:function(a,b){b?db.unshift(a):db.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kb(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gb(b,!0),a,d,e)}}),m.each({slideDown:gb("show"),slideUp:gb("hide"),slideToggle:gb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($a=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$a=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_a||(_a=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_a),_a=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lb=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lb,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mb,nb,ob=m.expr.attrHandle,pb=/^(?:checked|selected)$/i,qb=k.getSetAttribute,rb=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nb:mb)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rb&&qb||!pb.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qb?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nb={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rb&&qb||!pb.test(c)?a.setAttribute(!qb&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=ob[b]||m.find.attr;ob[b]=rb&&qb||!pb.test(b)?function(a,b,d){var e,f;return d||(f=ob[b],ob[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,ob[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rb&&qb||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mb&&mb.set(a,b,c)}}),qb||(mb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},ob.id=ob.name=ob.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mb.set},m.attrHooks.contenteditable={set:function(a,b,c){mb.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sb=/^(?:input|select|textarea|button|object)$/i,tb=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sb.test(a.nodeName)||tb.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var ub=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ub," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ub," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ub," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vb=m.now(),wb=/\?/,xb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yb,zb,Ab=/#.*$/,Bb=/([?&])_=[^&]*/,Cb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Db=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Eb=/^(?:GET|HEAD)$/,Fb=/^\/\//,Gb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hb={},Ib={},Jb="*/".concat("*");try{zb=location.href}catch(Kb){zb=y.createElement("a"),zb.href="",zb=zb.href}yb=Gb.exec(zb.toLowerCase())||[];function Lb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mb(a,b,c,d){var e={},f=a===Ib;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nb(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Ob(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zb,type:"GET",isLocal:Db.test(yb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nb(Nb(a,m.ajaxSettings),b):Nb(m.ajaxSettings,a)},ajaxPrefilter:Lb(Hb),ajaxTransport:Lb(Ib),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cb.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zb)+"").replace(Ab,"").replace(Fb,yb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gb.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yb[1]&&c[2]===yb[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yb[3]||("http:"===yb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mb(Hb,k,b,v),2===t)return v;h=m.event&&k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Eb.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wb.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bb.test(e)?e.replace(Bb,"$1_="+vb++):e+(wb.test(e)?"&":"?")+"_="+vb++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jb+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mb(Ib,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Ob(k,v,c)),u=Pb(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qb=/%20/g,Rb=/\[\]$/,Sb=/\r?\n/g,Tb=/^(?:submit|button|image|reset|file)$/i,Ub=/^(?:input|select|textarea|keygen)/i;function Vb(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rb.test(a)?d(a,e):Vb(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vb(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vb(c,a[c],b,e);return d.join("&").replace(Qb,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Ub.test(this.nodeName)&&!Tb.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sb,"\r\n")}}):{name:b.name,value:c.replace(Sb,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zb()||$b()}:Zb;var Wb=0,Xb={},Yb=m.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Xb)Xb[a](void 0,!0)}),k.cors=!!Yb&&"withCredentials"in Yb,Yb=k.ajax=!!Yb,Yb&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xb[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xb[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zb(){try{return new a.XMLHttpRequest}catch(b){}}function $b(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _b=[],ac=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_b.pop()||m.expando+"_"+vb++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ac.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ac.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ac,"$1"+e):b.jsonp!==!1&&(b.url+=(wb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_b.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bc=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bc)return bc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cc=a.document.documentElement;function dc(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cc;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cc})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=La(k.pixelPosition,function(a,c){return c?(c=Ja(a,b),Ha.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ec=a.jQuery,fc=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fc),b&&a.jQuery===m&&(a.jQuery=ec),m},typeof b===K&&(a.jQuery=a.$=m),m});
    6  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/debug/shared/style.css:
   22                 monospace; font-size: 14px; }
   23  
   24: div.debugger { text-align: left; padding: 12px; margin: auto;
   25                 background-color: white; }
   26  h1           { font-size: 36px; margin: 0 0 0.3em 0; }
   ..
   70                color: black; padding: 5px!important;
   71                margin: 3px 0 0 0!important; cursor: default!important;
   72:               max-height: 400px; overflow: auto; }
   73  pre.console form { color: #555; }
   74  pre.console input { background-color: transparent; color: #555;
   ..
  138      padding: 10px 50px;
  139      width: 350px;
  140:     margin: 10% auto 0 auto;
  141      border: 1px solid #ccc;
  142      border-radius: 2px;

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/debug/tbtools.py:
  112    look at the traceback which led to the error.  <span class="nojavascript">
  113    If you enable JavaScript you can also use additional features such as code
  114:   execution (if the evalex feature is enabled), automatic pasting of the
  115    exceptions and much more.</span>
  116  </div>
  ...
  127  <div class="explanation">
  128  In this console you can execute Python expressions in the context of the
  129: application.  The initial namespace was created by the debugger automatically.
  130  </div>
  131  <div class="console"><div class="inner">The Console requires JavaScript.</div></div>

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/http.py:
  258      the list may include quoted-strings.  A quoted-string could
  259      contain a comma.  A non-quoted string could have quotes in the
  260:     middle.  Quotes are removed automatically after parsing.
  261  
  262      It basically works like :func:`parse_set_header` just that items
  ...
  788      :param environ: the WSGI environment of the request to be checked.
  789      :param etag: the etag for the response for comparison.
  790:     :param data: or alternatively the data of the response to automatically
  791                   generate an etag using :func:`generate_etag`.
  792      :param last_modified: an optional date of the last modification.
  ...
  972                       supported by all browsers.
  973      :param charset: the encoding for unicode values.
  974:     :param sync_expires: automatically set expires if max_age is defined
  975                           but expires not.
  976      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/routing.py:
  541          list of another rule for that path the error raised is of the type
  542          `MethodNotAllowed` rather than `NotFound`.  If `GET` is present in the
  543:         list of methods and `HEAD` is not, `HEAD` is added automatically.
  544  
  545          .. versionchanged:: 0.6.1
  546:            `HEAD` is now automatically added to the methods if `GET` is
  547             present.  The reason for this is that existing code often did not
  548             work properly in servers not rewriting `HEAD` to `GET`
  549:            automatically and it was not documented how `HEAD` should be
  550             treated.  This was considered a bug in Werkzeug because of that.
  551  
  ...
 1171          some URLs that expect a language code and others that do not and
 1172          you want to wrap the builder a bit so that the current language
 1173:         code is automatically added if not provided but endpoints expect
 1174          it.
 1175  
 ....
 1261  
 1262          If `subdomain` is `None` but an environment and a server name is
 1263:         provided it will calculate the current subdomain automatically.
 1264          Example: `server_name` is ``'example.com'`` and the `SERVER_NAME`
 1265          in the wsgi `environ` is ``'staging.dev.example.com'`` the calculated
 ....
 1498                              endpoint (defaults to `False`).
 1499          :param query_args: optional query arguments that are used for
 1500:                            automatic redirects as string or dictionary.  It's
 1501                             currently not possible to use the query arguments
 1502                             for URL matching.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/serving.py:
  603                 use_debugger=False, use_evalex=True,
  604                 extra_files=None, reloader_interval=1,
  605:                reloader_type='auto', threaded=False,
  606                 processes=1, request_handler=None, static_files=None,
  607                 passthrough_errors=False, ssl_context=None):
  ...
  621  
  622      .. versionadded:: 0.8
  623:        Added support for automatically loading a SSL context from certificate
  624         file and private key.
  625  
  ...
  635      :param port: The port for the server.  eg: ``8080``
  636      :param application: the WSGI application to execute
  637:     :param use_reloader: should the server automatically restart the python
  638                           process if modules were changed?
  639      :param use_debugger: should the werkzeug debugging system be used?
  ...
  644      :param reloader_interval: the interval for the reloader in seconds.
  645      :param reloader_type: the type of reloader to use.  The default is
  646:                           auto detection.  Valid values are ``'stat'`` and
  647                            ``'watchdog'``. See :ref:`reloader` for more
  648                            information.
  ...
  666                          :class:`ssl.SSLContext`, a tuple in the form
  667                          ``(cert_file, pkey_file)``, the string ``'adhoc'`` if
  668:                         the server should automatically create one, or ``None``
  669                          to disable SSL (which is the default).
  670      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/test.py:
  236  
  237          -   a :class:`file`-like object:  These are converted into
  238:             :class:`FileStorage` objects automatically.
  239          -   a `tuple`:  The :meth:`~FileMultiDict.add_file` method is called
  240              with the key and the unpacked `tuple` items as positional
  ...
  409          The content type for the request.  Reflected from and to the
  410          :attr:`headers`.  Do not set if you set :attr:`files` or
  411:         :attr:`form` for auto detection.''')
  412      del _get_content_type, _set_content_type
  413  
  ...
  424          The content length as integer.  Reflected from and to the
  425          :attr:`headers`.  Do not set if you set :attr:`files` or
  426:         :attr:`form` for auto detection.''')
  427      del _get_content_length, _set_content_length
  428  
  ...
  519      def close(self):
  520          """Closes all files.  If you put real :class:`file` objects into the
  521:         :attr:`files` dict you can call this method to automatically close
  522          them all in one go.
  523          """
  ...
  690          real_server_name = get_host(environ).rsplit(':', 1)[0].split('.')
  691          if cur_server_name == ['']:
  692:             # this is a local redirect having autocorrect_location_header=False
  693              cur_server_name = real_server_name
  694              base_url = EnvironBuilder(environ).base_url
  ...
  741          :param as_tuple: Returns a tuple in the form ``(environ, result)``
  742          :param buffered: Set this to True to buffer the application run.
  743:                          This will automatically close the application for
  744                           you as well.
  745          :param follow_redirects: Set this to True if the `Client` should
  ...
  862      Sometimes applications may use the `write()` callable returned
  863      by the `start_response` function.  This tries to resolve such edge
  864:     cases automatically.  But if you don't get the expected output you
  865      should set `buffered` to `True` which enforces buffering.
  866  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/testapp.py:
   66                 font-size: 15px; text-align: center; }
   67    #logo      { float: right; padding: 0 0 10px 10px; }
   68:   div.box    { text-align: left; width: 45em; margin: auto; padding: 50px 0;
   69                 background-color: white; }
   70    h1, h2     { font-family: 'Ubuntu', 'Lucida Grande', 'Lucida Sans Unicode',

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/urls.py:
  195          points to localhost, it's represented as ``None``.
  196  
  197:         The `pathformat` by default is autodetection but needs to be set
  198          when working with URLs of a specific system.  The supported values
  199          are ``'windows'`` when working with Windows or DOS paths and
  ...
  206                             Currently ``'windows'`` and ``'posix'`` are
  207                             supported.  Defaults to ``None`` which is
  208:                            autodetect.
  209          """
  210          if self.scheme != 'file':

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/utils.py:
  375          '<title>Redirecting...</title>\n'
  376          '<h1>Redirecting...</h1>\n'
  377:         '<p>You should be redirected automatically to target URL: '
  378          '<a href="%s">%s</a>.  If not click the link.' %
  379          (escape(location), display_location), code, mimetype='text/html')
  ...
  410      :return: imported object
  411      """
  412:     # force the import name to automatically convert to strings
  413      # __import__ is not able to handle unicode strings in the fromlist
  414      # if the module is a package
  ...
  446  def find_modules(import_path, include_packages=False, recursive=False):
  447      """Finds all the modules below a package.  This can be useful to
  448:     automatically import all views / controllers so that their metaclasses /
  449      function decorators have a chance to register themselves on the
  450      application.
  ...
  481      the function without causing a `TypeError` because the function signature
  482      is incompatible.  If `drop_extra` is set to `True` (which is the default)
  483:     any extra positional or keyword arguments are dropped automatically.
  484  
  485      The exception raised provides three attributes:

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/wrappers.py:
  282          argument.  This works like the :func:`responder` decorator but the
  283          function is passed the request object as first argument and the
  284:         request object will be closed automatically::
  285  
  286              @Request.application
  ...
  394          """Closes associated resources of this request object.  This
  395          closes all file handles explicitly.  You can also use the request
  396:         object in a with statement which will automatically close it.
  397  
  398          .. versionadded:: 0.9
  ...
  784      #:
  785      #: .. versionadded:: 0.8
  786:     autocorrect_location_header = True
  787  
  788:     #: Should this response object automatically set the content-length
  789      #: header if possible?  This is true by default.
  790      #:
  791      #: .. versionadded:: 0.8
  792:     automatically_set_content_length = True
  793  
  794      def __init__(self, response=None, status=None, headers=None,
  ...
  893          the time.  Sometimes applications may use the `write()` callable
  894          returned by the `start_response` function.  This tries to resolve such
  895:         edge cases automatically.  But if you don't get the expected output
  896          you should set `buffered` to `True` which enforces buffering.
  897  
  ...
  951          """Sets a new string as response.  The value set must either by a
  952          unicode or bytestring.  If a unicode string is set it's encoded
  953:         automatically to the charset of the response (utf-8 by default).
  954  
  955          .. versionadded:: 0.9
  ...
  962              value = bytes(value)
  963          self.response = [value]
  964:         if self.automatically_set_content_length:
  965              self.headers['Content-Length'] = str(len(value))
  966  
  ...
 1003      def make_sequence(self):
 1004          """Converts the response iterator in a list.  By default this happens
 1005:         automatically if required.  If `implicit_sequence_conversion` is
 1006:         disabled, this method is not automatically called and some properties
 1007          might raise exceptions.  This also encodes all the items.
 1008  
 ....
 1103      def close(self):
 1104          """Close the wrapped response if possible.  You can also use the object
 1105:         in a with statement which will automatically close it.
 1106  
 1107          .. versionadded:: 0.9
 ....
 1133  
 1134      def get_wsgi_headers(self, environ):
 1135:         """This is automatically called right before the response is started
 1136          and returns headers modified for the given environment.  It returns a
 1137          copy of the headers from the response with some modifications applied
 ....
 1139  
 1140          For example the location header (if present) is joined with the root
 1141:         URL of the environment.  Also the content length is automatically set
 1142          to zero here for certain status codes.
 1143  
 ....
 1182                  location = iri_to_uri(location, safe_conversion=True)
 1183  
 1184:             if self.autocorrect_location_header:
 1185                  current_url = get_current_url(environ, root_only=True)
 1186                  if isinstance(current_url, text_type):
 ....
 1196  
 1197          # remove entity headers and set content length to zero if needed.
 1198:         # Also update content_length accordingly so that the automatic
 1199          # content length detection does not trigger in the following
 1200          # code.
 ....
 1204              remove_entity_headers(headers)
 1205  
 1206:         # if we can determine the content length automatically, we
 1207          # should try to do that.  But only if this does not involve
 1208          # flattening the iterator or encoding of unicode strings in
 1209          # the response.  We however should not do that if we have a 304
 1210          # response.
 1211:         if self.automatically_set_content_length and \
 1212             self.is_sequence and content_length is None and status != 304:
 1213              try:
 ....
 1435      :class:`~werkzeug.datastructures.Headers`.
 1436  
 1437:     If you want the :meth:`freeze` method to automatically add an etag, you
 1438      have to mixin this method before the response base class.  The default
 1439      response class does not do that.
 ....
 1520          that your response data object implements `seekable`, `seek` and `tell`
 1521          methods as described by :py:class:`io.IOBase`.  Objects returned by
 1522:         :meth:`~werkzeug.wsgi.wrap_file` automatically implement those methods.
 1523  
 1524          It does not remove the body of the response because that's something
 1525:         the :meth:`__call__` function does for us automatically.
 1526  
 1527          Returns self so that you can do ``return resp.make_conditional(req)``
 ....
 1559              ):
 1560                  self.status_code = 304
 1561:             if self.automatically_set_content_length and 'content-length' not in self.headers:
 1562                  length = self.calculate_content_length()
 1563                  if length is not None:
 ....
 1673  
 1674      """Mixin for :class:`BaseRequest` subclasses.  Classes that inherit from
 1675:     this mixin will automatically get a :attr:`stream` property that provides
 1676      a write-only interface to the response iterable.
 1677      """
 ....
 1686  
 1687      """A mixin for :class:`BaseRequest` subclasses.  Request objects that
 1688:     mix this class in will automatically get descriptors for a couple of
 1689:     HTTP headers with automatic type conversion.
 1690  
 1691      .. versionadded:: 0.5
 ....
 1775  
 1776      """A mixin for :class:`BaseResponse` subclasses.  Response objects that
 1777:     mix this class in will automatically get descriptors for a couple of
 1778:     HTTP headers with automatic type conversion.
 1779      """
 1780  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/werkzeug/wsgi.py:
   30  def responder(f):
   31      """Marks a function as responder.  Decorate a function with it and it
   32:     will automatically call the return value as WSGI application.
   33  
   34      Example::

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wheel-0.29.0.dist-info/DESCRIPTION.rst:
  261  0.9.2
  262  =====
  263: - Automatic signing if WHEEL_TOOL points to the wheel binary
  264  - Even more Python 3 fixes
  265  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wheel-0.29.0.dist-info/METADATA:
  293  0.9.2
  294  =====
  295: - Automatic signing if WHEEL_TOOL points to the wheel binary
  296  - Even more Python 3 fixes
  297  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wheel/signatures/djbec.py:
    4  # Adapted by Ron Garret
    5  # Sped up considerably using coordinate transforms found on:
    6: # http://www.hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    7  # Specifically add-2008-hwcd-4 and dbl-2008-hwcd
    8  
    .
   78  
   79  # Faster (!) version based on:
   80: # http://www.hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
   81  
   82  def xpt_add(pt1, pt2):

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wtforms/ext/appengine/db.py:
  147  def convert_DateTimeProperty(model, prop, kwargs):
  148      """Returns a form field for a ``db.DateTimeProperty``."""
  149:     if prop.auto_now or prop.auto_now_add:
  150          return None
  151  
  ...
  156  def convert_DateProperty(model, prop, kwargs):
  157      """Returns a form field for a ``db.DateProperty``."""
  158:     if prop.auto_now or prop.auto_now_add:
  159          return None
  160  
  ...
  165  def convert_TimeProperty(model, prop, kwargs):
  166      """Returns a form field for a ``db.TimeProperty``."""
  167:     if prop.auto_now or prop.auto_now_add:
  168          return None
  169  
  ...
  273      +--------------------+-------------------+--------------+------------------+
  274      | DateTimeProperty   | DateTimeField     | datetime     | skipped if       |
  275:     |                    |                   |              | auto_now[_add]   |
  276      +--------------------+-------------------+--------------+------------------+
  277      | DateProperty       | DateField         | date         | skipped if       |
  278:     |                    |                   |              | auto_now[_add]   |
  279      +--------------------+-------------------+--------------+------------------+
  280      | TimeProperty       | DateTimeField     | time         | skipped if       |
  281:     |                    |                   |              | auto_now[_add]   |
  282      +--------------------+-------------------+--------------+------------------+
  283      | ListProperty       | None              | list         | always skipped   |
  ...
  340      }
  341  
  342:     # Don't automatically add a required validator for these properties
  343:     NO_AUTO_REQUIRED = frozenset(['ListProperty', 'StringListProperty', 'BooleanProperty'])
  344  
  345      def __init__(self, converters=None):
  ...
  373              kwargs.update(field_args)
  374  
  375:         if prop.required and prop_type_name not in self.NO_AUTO_REQUIRED:
  376              kwargs['validators'].append(validators.required())
  377  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wtforms/ext/appengine/ndb.py:
  163              kwargs.update(field_args)
  164  
  165:         if prop._required and prop_type_name not in self.NO_AUTO_REQUIRED:
  166              kwargs['validators'].append(validators.required())
  167  
  ...
  203      +--------------------+-------------------+--------------+------------------+
  204      | DateTimeProperty   | DateTimeField     | datetime     | skipped if       |
  205:     |                    |                   |              | auto_now[_add]   |
  206      +--------------------+-------------------+--------------+------------------+
  207      | DateProperty       | DateField         | date         | skipped if       |
  208:     |                    |                   |              | auto_now[_add]   |
  209      +--------------------+-------------------+--------------+------------------+
  210      | TimeProperty       | DateTimeField     | time         | skipped if       |
  211:     |                    |                   |              | auto_now[_add]   |
  212      +--------------------+-------------------+--------------+------------------+
  213      | TextProperty       | TextAreaField     | unicode      |                  |
  ...
  235  
  236      """
  237:     # Don't automatically add a required validator for these properties
  238:     NO_AUTO_REQUIRED = frozenset(['ListProperty', 'StringListProperty', 'BooleanProperty'])
  239  
  240      def convert_StringProperty(self, model, prop, kwargs):
  ...
  261      def convert_DateTimeProperty(self, model, prop, kwargs):
  262          """Returns a form field for a ``ndb.DateTimeProperty``."""
  263:         if prop._auto_now or prop._auto_now_add:
  264              return None
  265  
  ...
  268      def convert_DateProperty(self, model, prop, kwargs):
  269          """Returns a form field for a ``ndb.DateProperty``."""
  270:         if prop._auto_now or prop._auto_now_add:
  271              return None
  272  
  ...
  275      def convert_TimeProperty(self, model, prop, kwargs):
  276          """Returns a form field for a ``ndb.TimeProperty``."""
  277:         if prop._auto_now or prop._auto_now_add:
  278              return None
  279  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wtforms/ext/django/orm.py:
   48  class ModelConverter(ModelConverterBase):
   49      DEFAULT_SIMPLE_CONVERSIONS = {
   50:         f.IntegerField: ['AutoField', 'IntegerField', 'SmallIntegerField', 'PositiveIntegerField', 'PositiveSmallIntegerField'],
   51          f.DecimalField: ['DecimalField', 'FloatField'],
   52          f.FileField: ['FileField', 'FilePathField', 'ImageField'],

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wtforms/ext/sqlalchemy/fields.py:
   33      have a consistent string representation. This means it mostly only works
   34      for those composed of string, unicode, and integer types. For the most
   35:     part, the primary keys will be auto-detected from the model, alternately
   36      pass a one-argument callable to `get_pk` which can return a unique
   37      comparable key.

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site-packages/wtforms/widgets/core.py:
   61      For the most part, HTMLString acts like a normal unicode string, except
   62      in that it has a `__html__` method. This method is invoked by a compatible
   63:     auto-escaping HTML framework to get the HTML-safe version of a string.
   64  
   65      Usage::
   ..
   74          This method actually returns itself, because it's assumed that
   75          whatever you give to HTMLString is a string with any unsafe values
   76:         already escaped. This lets auto-escaping template frameworks
   77          know that this string is safe for HTML rendering.
   78          """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/site.py:
    2  
    3  ****************************************************************
    4: * This module is automatically imported during initialization. *
    5  ****************************************************************
    6  
    7  In earlier versions of Python (up to 1.5a3), scripts or modules that
    8  needed to use site-specific modules would place ``import site''
    9: somewhere near the top of their code.  Because of the automatic
   10  import, this is no longer necessary (but code that does it still
   11  works).

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/tempfile.py:
  461  
  462      This class provides a wrapper around files opened for
  463:     temporary use.  In particular, it seeks to automatically
  464      remove the file when it is no longer needed.
  465      """
  ...
  534  
  535      Returns an object with a file-like interface; the name of the file
  536:     is accessible as its 'name' attribute.  The file will be automatically
  537      deleted when it is closed unless the 'delete' argument is set to False.
  538      """

/Users/Jackie/Desktop/project411/CU-Events/.cs411/lib/python3.6/token.py:
    3  __all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']
    4  
    5: #  This file is automatically generated; please don't muck it up!
    6  #
    7  #  To update the symbols in this file, 'cd' to the top directory of

/Users/Jackie/Desktop/project411/CU-Events/.cs411/selenium/webdriver/remote/getAttribute.js:
    8  var sa=Q,ua=E&&!(8<=Number(L)),va=E&&!(9<=Number(L));M&&P(2.3);M&&P(4);N&&P(6);function R(a,c){c=c.toLowerCase();if("style"==c)return wa(a.style.cssText);if(ua&&"value"==c&&T(a,"INPUT"))return a.value;if(va&&!0===a[c])return String(a.getAttribute(c));var b=a.getAttributeNode(c);return b&&b.specified?b.value:null}var xa=/[;]+(?=(?:(?:[^"]*"){2})*[^"]*$)(?=(?:(?:[^']*'){2})*[^']*$)(?=(?:[^()]*\([^()]*\))*[^()]*$)/;
    9  function wa(a){var c=[];ca(a.split(xa),function(a){var d=a.indexOf(":");0<d&&(a=[a.slice(0,d),a.slice(d+1)],2==a.length&&c.push(a[0].toLowerCase(),":",a[1],";"))});c=c.join("");return c=";"==c.charAt(c.length-1)?c:c+";"}function U(a,c){var b;ua&&"value"==c&&T(a,"OPTION")&&null===R(a,"value")?(b=[],oa(a,b,!1),b=b.join("")):b=a[c];return b}function T(a,c){return!!a&&1==a.nodeType&&(!c||a.tagName.toUpperCase()==c)}
   10: function ya(a){return T(a,"OPTION")?!0:T(a,"INPUT")?(a=a.type.toLowerCase(),"checkbox"==a||"radio"==a):!1};var za={"class":"className",readonly:"readOnly"},V="async autofocus autoplay checked compact complete controls declare defaultchecked defaultselected defer disabled draggable ended formnovalidate hidden indeterminate iscontenteditable ismap itemscope loop multiple muted nohref noresize noshade novalidate nowrap open paused pubdate readonly required reversed scoped seamless seeking selected spellcheck truespeed willvalidate".split(" ");function Aa(a,c){var b=null,d=c.toLowerCase();if("style"==d)return(b=a.style)&&!l(b)&&(b=b.cssText),b;if(("selected"==d||"checked"==d)&&ya(a)){if(!ya(a))throw new m(15,"Element is not selectable");var b="selected",f=a.type&&a.type.toLowerCase();if("checkbox"==f||"radio"==f)b="checked";return U(a,b)?"true":null}var h=T(a,"A");if(T(a,"IMG")&&"src"==d||h&&"href"==d)return(b=R(a,d))&&(b=U(a,d)),b;if("spellcheck"==d){b=R(a,d);if(null!==b){if("false"==b.toLowerCase())return"false";if("true"==b.toLowerCase())return"true"}return U(a,
   11  d)+""}h=za[c]||c;a:if(l(V))d=l(d)&&1==d.length?V.indexOf(d,0):-1;else{for(var k=0;k<V.length;k++)if(k in V&&V[k]===d){d=k;break a}d=-1}if(0<=d)return(b=null!==R(a,c)||U(a,h))?"true":null;try{f=U(a,h)}catch(S){}(d=null==f)||(d=typeof f,d="object"==d&&null!=f||"function"==d);d?b=R(a,c):b=f;return null!=b?b.toString():null}var W=["_"],X=g;W[0]in X||!X.execScript||X.execScript("var "+W[0]);for(var Y;W.length&&(Y=W.shift());){var Z;if(Z=!W.length)Z=void 0!==Aa;Z?X[Y]=Aa:X[Y]?X=X[Y]:X=X[Y]={}};; return this._.apply(null,arguments);}.apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);}
   12  

/Users/Jackie/Desktop/project411/CU-Events/.cs411/selenium/webdriver/remote/isDisplayed.js:
   98  function Mc(a,b,c){function d(a){var b=Nc(a);return 0<b.height&&0<b.width?!0:M(a,"PATH")&&(0<b.height||0<b.width)?(a=Y(a,"stroke-width"),!!a&&0<parseInt(a,10)):"hidden"!=Y(a,"overflow")&&Ha(a.childNodes,function(a){return 3==a.nodeType||M(a)&&d(a)})}function e(a){return Oc(a)==Z&&Ia(a.childNodes,function(a){return!M(a)||e(a)||!d(a)})}if(!M(a))throw Error("Argument to isShown must be of type Element");if(M(a,"BODY"))return!0;if(M(a,"OPTION")||M(a,"OPTGROUP"))return a=qb(a,function(a){return M(a,"SELECT")}),
   99  !!a&&Mc(a,!0,c);var f=Pc(a);if(f)return!!f.w&&0<f.rect.width&&0<f.rect.height&&Mc(f.w,b,c);if(M(a,"INPUT")&&"hidden"==a.type.toLowerCase()||M(a,"NOSCRIPT"))return!1;f=Y(a,"visibility");return"collapse"!=f&&"hidden"!=f&&c(a)&&(b||Qc(a))&&d(a)?!e(a):!1}var Z="hidden";
  100: function Oc(a){function b(a){function b(a){return a==g?!0:!Y(a,"display").lastIndexOf("inline",0)||"absolute"==c&&"static"==Y(a,"position")?!1:!0}var c=Y(a,"position");if("fixed"==c)return w=!0,a==g?null:g;for(a=Kc(a);a&&!b(a);)a=Kc(a);return a}function c(a){var b=a;if("visible"==p)if(a==g&&h)b=h;else if(a==h)return{x:"visible",y:"visible"};b={x:Y(b,"overflow-x"),y:Y(b,"overflow-y")};a==g&&(b.x="visible"==b.x?"auto":b.x,b.y="visible"==b.y?"auto":b.y);return b}function d(a){if(a==g){var b=(new rb(f)).a;
  101  a=b.scrollingElement?b.scrollingElement:Xa||"CSS1Compat"!=b.compatMode?b.body||b.documentElement:b.documentElement;b=b.parentWindow||b.defaultView;a=E&&bb("10")&&b.pageYOffset!=a.scrollTop?new D(a.scrollLeft,a.scrollTop):new D(b.pageXOffset||a.scrollLeft,b.pageYOffset||a.scrollTop)}else a=new D(a.scrollLeft,a.scrollTop);return a}var e=Rc(a),f=G(a),g=f.documentElement,h=f.body,p=Y(g,"overflow"),w;for(a=b(a);a;a=b(a)){var m=c(a);if("visible"!=m.x||"visible"!=m.y){var u=Nc(a);if(!u.width||!u.height)return Z;
  102  var y=e.right<u.left,Q=e.bottom<u.top;if(y&&"hidden"==m.x||Q&&"hidden"==m.y)return Z;if(y&&"visible"!=m.x||Q&&"visible"!=m.y){y=d(a);Q=e.bottom<u.top-y.y;if(e.right<u.left-y.x&&"visible"!=m.x||Q&&"visible"!=m.x)return Z;e=Oc(a);return e==Z?Z:"scroll"}y=e.left>=u.left+u.width;u=e.top>=u.top+u.height;if(y&&"hidden"==m.x||u&&"hidden"==m.y)return Z;if(y&&"visible"!=m.x||u&&"visible"!=m.y){if(w&&(m=d(a),e.left>=g.scrollWidth-m.x||e.right>=g.scrollHeight-m.y))return Z;e=Oc(a);return e==Z?Z:"scroll"}}}return"none"}

/Users/Jackie/Desktop/project411/CU-Events/app/static/styles/index.css:
    1  .col-centered {
    2:     margin: 0 auto;
    3      float: none;
    4  }

/Users/Jackie/Desktop/project411/CU-Events/app/static/styles/Style.css:
   38  
   39  #wrapper{
   40:   margin: auto;
   41    width: 50%;
   42    text-align: center;
   ..
   46      border: 1px solid black;
   47  }
   48: #autocomplete {
   49    padding: 20px;
   50    width: 600px;
   ..
  141      width: 100%; /* Full width */
  142      height: 100%; /* Full height */
  143:     overflow: auto; /* Enable scroll if needed */
  144      background-color: rgb(0,0,0); /* Fallback color */
  145      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */

/Users/Jackie/Desktop/project411/CU-Events/app/templates/index.html:
   28  	<div class="row">
   29  		<div class="input-group col-sm-6 col-centered">
   30: 			<!-- <input id = "autocomplete" type="text" name="search" placeholder="Search for.."> -->
   31  			<div class="form-group">
   32:         		<input type="text" id="autocomplete" class="form-control" placeholder="Search">
   33      		</div>
   34  			<span class="input-group-btn"> 
   ..
   44  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
   45  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
   46: <script src="js/jquery.autocomplete.js"></script>
   47  -->
   48  <script type="text/javascript">
   49:       var auto_event = $( "#autocomplete" ).autocomplete({
   50        source: ["hello", "this", "is", "a", "test"]
   51        messages: {

/Users/Jackie/Desktop/project411/CU-Events/app/templates/signin.html:
   22          	<legend class="" style="text-align: center; padding-bottom: 40px; ">Sign In</legend>
   23      	</div>
   24:   	<form action="{{ url_for('signin') }}" autocomplete="off" method=post>
   25    		<!-- <input style="display:none"> -->
   26  		<!-- <input type="password" style="display:none"> -->

/Users/Jackie/Desktop/project411/CU-Events/sql/schema.sql:
    1  CREATE TABLE User (
    2: 	uid					INTEGER NOT NULL AUTO_INCREMENT,
    3  	username			VARCHAR(30) NOT NULL UNIQUE,
    4  	password			VARCHAR(54),
    .
   16  );
   17  CREATE TABLE Community (
   18: 	cid					INTEGER NOT NULL AUTO_INCREMENT,
   19  	name				VARCHAR(40),
   20  	uid					INTEGER,
   ..
   31  );
   32  CREATE TABLE Event (
   33: 	eid					INTEGER NOT NULL AUTO_INCREMENT,
   34  	title				VARCHAR(60),
   35  	description			VARCHAR(1000),

754 matches across 177 files
