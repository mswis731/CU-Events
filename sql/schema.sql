CREATE TABLE User (
	uid					INTEGER NOT NULL AUTO_INCREMENT,
	username			VARCHAR(30) NOT NULL UNIQUE,
	password			VARCHAR(30),
	firstname			VARCHAR(30),
	lastname			VARCHAR(30),
	email				VARCHAR(50) NOT NULL UNIQUE,
	PRIMARY KEY(uid)
);
CREATE TABLE Message (
	timestamp			DATETIME,
	text				VARCHAR(300),
	uid					INTEGER,
	FOREIGN KEY(uid) REFERENCES User(uid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(timestamp, uid)
);
CREATE TABLE Community (
	cid					INTEGER NOT NULL AUTO_INCREMENT,
	name				VARCHAR(40),
	uid					INTEGER,
	FOREIGN KEY(uid) REFERENCES User(uid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(cid)
);
CREATE TABLE EventType (
	name				VARCHAR(40),
	PRIMARY KEY(name)
);
CREATE TABLE Category (
	name				VARCHAR(40),
	PRIMARY KEY(name)
);
CREATE TABLE Event (
	eid					INTEGER NOT NULL AUTO_INCREMENT,
	title				VARCHAR(60),
	description			VARCHAR(1000),
	building			VARCHAR(60),
	addrAndStreet		VARCHAR(30),
	city				VARCHAR(30),
	zipcode				INTEGER,
	startDate			DATE,
	startTime			TIME,
	endDate				DATE,
	endTime				TIME,
	lowPrice			REAL,
	highPrice			REAL,
	nonUserViews		INTEGER DEFAULT 0,
	PRIMARY KEY(eid)
);
CREATE TABLE EventCrawled (
	eid					INTEGER,
	url					VARCHAR(150) UNIQUE,
	site				VARCHAR(40),
	FOREIGN KEY(eid) REFERENCES Event(eid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(eid)
);
CREATE TABLE EventCreated (
	eid				INTEGER,
	uid				INTEGER,
	cid				INTEGER,
	FOREIGN KEY(eid) REFERENCES Event(eid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(uid) REFERENCES User(uid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(cid) REFERENCES Community(cid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(eid)
);
CREATE TABLE HasCategory (
	eid					INTEGER,
	categoryName		VARCHAR(40),
	FOREIGN KEY(eid) REFERENCES Event(eid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(categoryName) REFERENCES Category(name) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(eid, categoryName)
);
CREATE TABLE HasEventType (
	eid					INTEGER,
	eventType			VARCHAR(40),
	FOREIGN KEY(eid) REFERENCES Event(eid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(eventType) REFERENCES EventType(name) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(eid, eventType)
);
CREATE TABLE HasInterests (
	uid					INTEGER,
	categoryName		VARCHAR(40),
	FOREIGN KEY(uid) REFERENCES User(uid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(categoryName) REFERENCES Category(name) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(uid, categoryName)
);
CREATE TABLE CommunityCategories (
	cid					INTEGER,
	categoryName		VARCHAR(40),
	FOREIGN KEY(cid) REFERENCES Community(cid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(categoryName) REFERENCES Category(name) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(cid, categoryName)
);
CREATE TABLE HasRegisteredViews (
	eid					INTEGER,
	uid				INTEGER,
	FOREIGN KEY(eid) REFERENCES Event(eid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(uid) REFERENCES User(uid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(eid, uid)
);
CREATE TABLE IsCommunityMember (
	uid					INTEGER,
	cid					INTEGER,
	FOREIGN KEY(uid) REFERENCES User(uid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(cid) REFERENCES Community(cid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(uid, cid)
);
CREATE TABLE IsSharedEvent (
	eid				INTEGER,
	cid				INTEGER,
	FOREIGN KEY(eid) REFERENCES EventCrawled(eid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(cid) REFERENCES Community(cid) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(eid, cid)
);
